(1
 (a . [(20210929 1510) ((emacs (25))) "Associative data structure functions" tar])
 (ace-flyspell . [(0 1 3) ((avy (0 4 0))) "Jump to and correct spelling errors using `acemode' and flyspell" tar])
 (ace-jump-mode . [(2 0) nil "a quick cursor location minor mode for emacs" tar])
 (ace-link . [(0 5 0) ((avy (0 4 0))) "Quickly follow links" tar])
 (ace-mc . [(20190206 749) ((ace-jump-mode (1 0)) (multiple-cursors (1 0)) (dash (2 10 0))) "Add multiple cursors quickly using ace jump" tar])
 (ace-popup-menu . [(0 2 1) ((emacs (24 3)) (avy-menu (0 1))) "Replace GUI popup menu with something more efficient" tar])
 (ace-window . [(0 10 0) ((avy (0 5 0))) "Quickly switch windows." tar])
 (add-node-modules-path . [(1 3 1) ((s (1 12 0))) "Add node_modules to your exec-path" tar])
 (aio . [(1 0) ((emacs (26 1))) "async/await for Emacs Lisp" tar])
 (alarm-clock . [(1 0) ((emacs (24 4)) (f (0 17 0))) "Alarm Clock" tar])
 (alert . [(1 3) ((gntp (0 1)) (log4e (0 3 0)) (cl-lib (0 5))) "Growl-style notification system for Emacs" tar])
 (all-the-icons . [(20220621 111) ((emacs (24 3))) "A library for inserting Developer icons" tar])
 (all-the-icons-dired . [(20220620 1939) ((emacs (24 4)) (all-the-icons (2 2 0))) "Shows icons for each file in dired mode" tar])
 (all-the-icons-ivy . [(0 5 0) ((emacs (24 4)) (all-the-icons (2 4 0)) (ivy (0 8 0))) "Shows icons while using ivy and counsel" tar])
 (all-the-icons-ivy-rich . [(1 7 1) ((emacs (25 1)) (ivy-rich (0 1 0)) (all-the-icons (2 2 0))) "Better experience with icons for ivy" tar])
 (ammonite-term-repl . [(20200416 559) ((emacs (24 3)) (s (1 12 0)) (scala-mode (0 23))) "Scala Ammonite REPL in term mode." tar])
 (anaphora . [(1 0 4) nil "anaphoric macros providing implicit temp variables" tar])
 (annotate . [(1 6 0) nil "annotate files without changing them" tar])
 (ansi . [(0 4 1) ((s (1 6 1)) (dash (1 5 0))) "Turn string into ansi strings" tar])
 (anzu . [(0 64) ((emacs (25 1))) "Show number of matches in mode-line while searching" tar])
 (apiwrap . [(0 5) ((emacs (25))) "api-wrapping macros" tar])
 (async . [(20220318 1342) ((emacs (24 4))) "Asynchronous processing in Emacs" tar])
 (auctex . [(13 1 3) ((emacs (25 1))) "Integrated environment for *TeX*" tar])
 (auto-sudoedit . [(20220421 1147) ((emacs (26 1)) (f (0 19 0))) "Auto sudo edit by tramp" tar])
 (avy . [(0 5 0) ((emacs (24 1)) (cl-lib (0 5))) "Jump to arbitrary positions in visible text and select text quickly." tar])
 (avy-menu . [(0 1 1) ((emacs (24 3)) (avy (0 3 0))) "Library providing avy-powered popup menu" tar])
 (avy-zap . [(0 1 4) ((avy (0 2 0))) "Zap to char using `avy'" tar])
 (awscli-capf . [(20190930 1517) ((emacs (26))) "Completion at point function for the AWS CLI" tar])
 (bash-completion . [(3 1 0) ((emacs (24 3))) "BASH completion for the shell buffer" tar])
 (bbdb- . [(0 0 2) ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) "provide interface for more easily search/choice than BBDB." tar])
 (bbdb . [(20220416 405) nil "The Insidious Big Brother Database for GNU Emacs" tar])
 (bbdb-csv-import . [(20180122 49) ((pcsv (1 3 3)) (dash (2 5 0)) (bbdb (20140412 1949))) "import csv to bbdb version 3+" tar])
 (bbdb-ext . [(20151220 2013) ((bbdb (2 36))) "Extra commands for BBDB" tar])
 (beginend . [(2 3 0) ((emacs (25 3))) "Redefine M> for some modes" tar])
 (benchmark-init . [(1 0) nil "Benchmarks Emacs require and load calls" tar])
 (biblio . [(0 2) ((emacs (24 3)) (biblio-core (0 2))) "Browse and import bibliographic references from CrossRef, arXiv, DBLP, HAL, Dissemin, and doi.org" tar])
 (biblio-core . [(0 2) ((emacs (24 3)) (let-alist (1 0 4)) (seq (1 11)) (dash (2 12 1))) "A framework for looking up and displaying bibliographic entries" tar])
 (bibtex-completion . [(2 0 0) ((parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5))) "A BibTeX backend for completion frameworks" tar])
 (bind-chord . [(20171204 2010) ((bind-key (1 0)) (key-chord (0 6))) "keychords" tar])
 (bind-key . [(2 4 1) nil "A simple way to manage personal keybindings" tar])
 (blamer . [(0 5 0) ((emacs (27 1)) (posframe (1 1 7))) "Show git blame info about current line" tar])
 (blimp . [(20180903 2240) ((emacs (25)) (eimp (1 4 0))) "Bustling Image Manipulation Package" tar])
 (bm . [(201905) nil "Visible bookmarks in buffer." tar])
 (browse-kill-ring . [(2 0 0) nil "interactively insert items from kill-ring" tar])
 (bufler . [(20210907 1145) ((emacs (26 3)) (dash (2 18)) (f (0 17)) (pretty-hydra (0 2 2)) (magit-section (0 1)) (map (2 1))) "Group buffers into workspaces with programmable rules" tar])
 (bui . [(1 2 1) ((emacs (24 3)) (dash (2 11 0))) "Buffer interface library" tar])
 (ca65-mode . [(0 3 3) ((emacs (26 1))) "Major mode for ca65 assembly files" tar])
 (cakecrumbs . [(20180929 139) ((emacs (24 4))) "Show parents on header for HTML/Jade/Sass/Stylus" tar])
 (camcorder . [(1 0) ((emacs (24)) (names (20150000)) (cl-lib (0 5))) "Record screencasts in gif or other formats." tar])
 (cfn-mode . [(20220221 1029) ((emacs (26 0)) (f (0 20 0)) (s (1 12 0)) (yaml-mode (0 0 13))) "AWS cloudformation mode" tar])
 (cfrs . [(1 6 0) ((emacs (26 1)) (dash (2 11 0)) (s (1 10 0)) (posframe (0 6 0))) "Childstring" tar])
 (change-inner . [(20210126 1456) ((expand-region (0 7))) "Change contents based on semantic units" tar])
 (cider . [(1 4 1) ((emacs (26)) (clojure-mode (5 14)) (parseedn (1 0 6)) (queue (0 2)) (spinner (1 7)) (seq (2 22)) (sesman (0 3 2))) "Clojure Interactive Development Environment that Rocks" tar])
 (cider-decompile . [(20151122 537) ((cider (0 3 0)) (javap-mode (9))) "decompilation extension for cider" tar])
 (cider-hydra . [(20190816 1121) ((cider (0 22 0)) (hydra (0 13 0))) "Hydras for CIDER." tar])
 (circe . [(2 12) ((emacs (24 5)) (cl-lib (0 5))) "Client for IRC in Emacs" tar])
 (citeproc . [(0 9) ((emacs (25)) (dash (2 13 0)) (s (1 12 0)) (f (0 18 0)) (queue (0 2)) (string-inflection (1 0)) (org (9)) (parsebib (2 4))) "A CSL 1.0.1 Citation Processor" tar])
 (clj-refactor . [(3 5 2) ((emacs (26 1)) (seq (2 19)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (clojure-mode (5 14)) (cider (1 3)) (parseedn (1 0 6)) (inflections (2 3)) (hydra (0 13 2))) "A collection of commands for refactoring Clojure code" tar])
 (clojars . [(20180825 1951) ((request-deferred (0 2 0))) "clojars.org search interface" tar])
 (clojure-mode . [(5 14 0) ((emacs (25 1))) "Major mode for Clojure code" tar])
 (clojure-mode-extra-font-locking . [(5 14 0) ((clojure-mode (3 0))) "Extra font-locking for Clojure mode" tar])
 (closql . [(1 2 1) ((emacs (25 1)) (emacsql-sqlite (3 0 0))) "store EIEIO objects using EmacSQL" tar])
 (color-theme . [(20190220 1115) nil "An OBSOLETE color-theme implementation" tar])
 (color-theme-sanityinc-tomorrow . [(1 17) nil "A version of Chris Kempson's various Tomorrow themes" tar])
 (comby . [(20200629 140) ((emacs (25 1))) "Emacs comby integration" tar])
 (command-log-mode . [(20160413 447) nil "log keyboard commands to buffer" tar])
 (commander . [(0 7 0) ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) "Emacs command line parser" tar])
 (company . [(20220425 1145) ((emacs (25 1))) "Modular text completion framework" tar])
 (company-auctex . [(20200529 1835) ((yasnippet (0 8 0)) (company (0 8 0)) (auctex (11 87))) "Companycompletion for AUCTeX" tar])
 (company-bibtex . [(20171105 644) ((company (0 9 0)) (cl-lib (0 5)) (parsebib (1 0))) "Company completion for bibtex keys" tar])
 (company-box . [(20211020 2007) ((emacs (26 0 91)) (dash (2 19 0)) (company (0 9 6)) (frame-local (0 0 1))) "Company front-end with icons" tar])
 (company-flx . [(20180103 518) ((emacs (24)) (company (0 8 12)) (flx (0 5))) "flx based fuzzy matching for company" tar])
 (company-fuzzy . [(20220616 1903) ((emacs (26 1)) (company (0 8 12)) (s (1 12 0)) (ht (2 0))) "Fuzzy matching for `company-mode'" tar])
 (company-ghci . [(20190707 311) ((company (0 8 11)) (haskell-mode (13))) "company backend which uses the current ghci process." tar])
 (company-lsp . [(2 1 0) ((emacs (25 1)) (lsp-mode (6 0)) (company (0 9 0)) (s (1 2 0)) (dash (2 11 0))) "Company completion backend for lsp-mode." tar])
 (company-math . [(1 4) ((company (0 8 0)) (math-symbol-lists (1 3))) "Completion backends for unicode math symbols and latex tags" tar])
 (company-native-complete . [(20220103 1622) ((emacs (26 1)) (company (0 9 0)) (native-complete (0 1 0))) "Company completion using native-complete" tar])
 (company-nixos-options . [(20160215 857) ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) "Company Backend for nixos-options" tar])
 (company-org-roam . [(20200711 355) ((emacs (26 1)) (company (0 9 0)) (dash (2 13)) (org-roam (1 0 0))) "Company backend for Org-roam" tar])
 (company-prescient . [(5 2 1) ((emacs (25 1)) (prescient (5 2 1)) (company (0 9 6))) "prescient.el + Company" tar])
 (company-restclient . [(0 3 0) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0)) (restclient (0 0 0))) "companymode" tar])
 (company-shell . [(1 2 1) ((emacs (24 4)) (company (0 8 12)) (dash (2 12 0)) (cl-lib (0 5))) "Company mode backend for shell functions" tar])
 (company-statistics . [(0 2 3) ((emacs (24 3)) (company (0 8 5))) "Sort candidates using completion history" tar])
 (company-terraform . [(1 3) ((emacs (24 4)) (company (0 8 12)) (terraform-mode (0 6))) "A company backend for terraform" tar])
 (company-try-hard . [(20200417 1603) ((emacs (24 3)) (company (0 8 0)) (dash (2 0))) "get all completions from company backends" tar])
 (compat . [(28 1 1 3) ((emacs (24 3)) (nadvice (0 3))) "Emacs Lisp Compatibility Library" tar])
 (coterm . [(1 5) ((emacs (26 1))) "Terminal emulation for comint" tar])
 (counsel . [(0 13 4) ((emacs (24 5)) (ivy (0 13 4)) (swiper (0 13 4))) "Various completion functions using Ivy" tar])
 (counsel-ag-popup . [(20210121 805) ((emacs (26 1)) (counsel (0 13 0)) (transient (0 3 0))) "Interactive search with counsel-ag" tar])
 (counsel-bbdb . [(0 0 4) ((ivy (0 8 0)) (emacs (24 3))) "Quick search&input email from BBDB based on ivy" tar])
 (counsel-css . [(1 0 7) ((emacs (24 4)) (counsel (0 7 0)) (cl-lib (0 5))) "stylesheetaware swiper" tar])
 (counsel-jq . [(1 1) ((swiper (0 12 0)) (ivy (0 12 0)) (emacs (24 1))) "Live preview of jq queries using counsel" tar])
 (counsel-org-capture-string . [(20200810 1114) ((emacs (25 1)) (ivy (0 13))) "Counsel for orgstring" tar])
 (counsel-projectile . [(0 3 2) ((counsel (0 13 4)) (projectile (2 5 0))) "Ivy integration for Projectile" tar])
 (counsel-tramp . [(0 7 5) ((emacs (24 3)) (counsel (0 10))) "Tramp ivy interface for ssh, docker, vagrant" tar])
 (cpu-sos . [(20200409 2356) ((emacs (25 1))) "S.O.S. from a CPU in distress" tar])
 (ctrlf . [(1 5) ((emacs (25 1))) "Emacs finally learns how to ctrl+F" tar])
 (dante . [(1 6) ((dash (2 12 0)) (emacs (25 1)) (f (0 19 0)) (flycheck (0 30)) (company (0 9)) (haskell-mode (13 14)) (s (1 11 0)) (lcr (1 0))) "Development mode for Haskell" tar])
 (dap-mode . [(0 7) ((emacs (26 1)) (dash (2 18 0)) (lsp-mode (6 0)) (bui (1 1 0)) (f (0 20 0)) (s (1 12 0)) (lsp-treemacs (0 1)) (posframe (0 7 0)) (ht (2 3))) "Debug Adapter Protocol mode" tar])
 (dash . [(20220608 1931) ((emacs (24))) "A modern list library for Emacs" tar])
 (dash-functional . [(2 19 1) ((dash (2 18 0))) "Collection of useful combinators for Emacs Lisp" tar])
 (deferred . [(0 5 1) ((emacs (24 4))) "Simple asynchronous functions for emacs lisp" tar])
 (define-word . [(0 1 0) ((emacs (24 1))) "display the definition of word at point." tar])
 (deft . [(0 8) nil "quickly browse, filter, and edit plain text notes" tar])
 (diminish . [(0 46) ((emacs (24 3))) "Diminished modes are minor modes with no modeline display" tar])
 (dir-treeview . [(20220505 27) ((emacs (24 4)) (treeview (1 1 0))) "A directory tree browser and simple file manager" tar])
 (dired-collapse . [(20210403 1230) ((dash (2 10 0)) (f (0 19 0)) (dired-hacks-utils (0 0 1))) "Collapse unique nested paths in dired listing" tar])
 (dired-du . [(0 5 2) ((emacs (24 4)) (cl-lib (0 5))) "Dired with recursive directory sizes" tar])
 (dired-hacks-utils . [(20201005 2318) ((dash (2 5 0))) "Utilities and helpers for dired-hacks collection" tar])
 (dired-imenu . [(0 5 0) nil "imenu binding for dired mode" tar])
 (dired-narrow . [(20181114 1723) ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) "Live-narrowing of search results for dired" tar])
 (dired-quick-sort . [(0 2) ((hydra (0 13 0)) (emacs (24))) "Persistent quick sorting of dired buffers in various ways." tar])
 (dired-rainbow . [(20190722 1109) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Extended file highlighting according to its type" tar])
 (dired-sidebar . [(20220618 237) ((emacs (25 1)) (dired-subtree (0 0 1))) "Tree browser leveraging dired" tar])
 (dired-subtree . [(20210105 1127) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Insert subdirectories in a tree-like fashion" tar])
 (direnv . [(2 2 0) ((emacs (25 1)) (dash (2 12 0))) "Support for direnv" tar])
 (disk-usage . [(1 3 3) ((emacs (26 1))) "Sort and browse disk usage listings" tar])
 (docker . [(2 1 2) ((aio (1 0)) (dash (2 19 1)) (docker-tramp (0 1)) (emacs (26 1)) (json-mode (1 8 0)) (s (1 12 0)) (tablist (1 0)) (transient (0 3 7))) "Interface to Docker" tar])
 (docker-tramp . [(0 1 1) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for docker containers" tar])
 (dockerfile-mode . [(1 6) ((emacs (24))) "Major mode for editing Docker's Dockerfiles" tar])
 (docstr . [(5 7 0) ((emacs (24 4)) (s (1 9 0))) "A document string minor mode" tar])
 (dumb-jump . [(0 5 4) ((emacs (24 3)) (s (1 11 0)) (dash (2 9 0)) (popup (0 5 3))) "Jump to definition for 50+ languages without configuration" tar])
 (easy-escape . [(20210917 1254) nil "Improve readability of escape characters in regular expressions" tar])
 (easy-kill . [(0 9 5) ((emacs (25)) (cl-lib (0 5))) "kill & mark things easily" tar])
 (ecukes . [(0 6 18) ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) "Cucumber for Emacs." tar])
 (edebug-inline-result . [(20220210 1357) ((emacs (25 1))) "Show Edebug result inline" tar])
 (edit-at-point . [(20191013 1218) nil "edit(copy,cut..) current things(word,symbol..) under cursor" tar])
 (edit-indirect . [(0 1 10) ((emacs (24 3))) "Edit regions in separate buffers" tar])
 (editorconfig . [(0 8 2) ((cl-lib (0 5)) (nadvice (0 3)) (emacs (24))) "EditorConfig Emacs Plugin" tar])
 (edn . [(1 1 2) ((cl-lib (0 3)) (emacs (24 1)) (dash (2 10 0)) (peg (0 6)) (s (1 8 0))) "Support for reading and writing the edn data format from elisp" tar])
 (eglot . [(20220612 1004) ((emacs (26 1)) (jsonrpc (1 0 14)) (flymake (1 2 1)) (project (0 3 0)) (xref (1 0 1)) (eldoc (1 11 0)) (seq (2 23))) "Client for Language Server Protocol (LSP) servers" tar])
 (eimp . [(20120826 2039) nil "Emacs Image Manipulation Package" tar])
 (el-fetch . [(20220622 2008) ((emacs (25 1))) "Show system information in Neofetch-like style (eg CPU, RAM)" tar])
 (el-mock . [(1 25 1) nil "Tiny Mock and Stub framework in Emacs Lisp" tar])
 (eldoc . [(1 12 0) ((emacs (26 3))) "Show function arglist or variable docstring in echo area" tar])
 (eldoc-eval . [(1 1) nil "Enable eldoc support when minibuffer is in use." tar])
 (elisp-refs . [(1 4) ((dash (2 12 0)) (s (1 11 0))) "find callers of elisp functions or macros" tar])
 (elisp-slime-nav . [(0 10) ((emacs (24 1)) (cl-lib (0 2))) "Make M, work in elisp like they do in slime" tar])
 (elixir-mode . [(2 4 0) ((emacs (25))) "Major mode for editing Elixir files" tar])
 (elm-mode . [(0 22 0) ((f (0 17)) (s (1 7 0)) (emacs (25 1)) (seq (2 23)) (reformatter (0 3))) "Major mode for Elm" tar])
 (elpher . [(3 4 1) ((emacs (27 1))) "A friendly gopher and gemini client" tar])
 (elpy . [(1 35 0) ((company (0 9 2)) (emacs (24 4)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0)) (s (1 11 0))) "Emacs Python Development Environment" tar])
 (emacsql . [(3 0 0) ((emacs (25 1))) "highend" tar])
 (emacsql-sqlite . [(3 0 0) ((emacs (25 1)) (emacsql (2 0 0))) "EmacSQL back-end for SQLite" tar])
 (emacsql-sqlite3 . [(20220304 1014) ((emacs (26 1)) (emacsql (3 0 0))) "Yet another EmacSQL backend for SQLite" tar])
 (embark . [(20220608 17) ((emacs (26 1))) "Conveniently act on minibuffer completions" tar])
 (embrace . [(0 1 4) ((cl-lib (0 5)) (expand-region (0 10 0))) "Add/Change/Delete pairs based on `expand-region'" tar])
 (emms . [(10) ((cl-lib (0 5)) (nadvice (0 3)) (seq (0))) "The Emacs Multimedia System" tar])
 (emojify . [(1 2) ((seq (1 11)) (ht (2 0)) (emacs (24 3))) "Display emojis in Emacs" tar])
 (envrc . [(20220604 1519) ((seq (2)) (emacs (25 1)) (inheritenv (0 1))) "Support for `direnv' that operates buffer-locally" tar])
 (epl . [(0 9) ((cl-lib (0 3))) "Emacs Package Library" tar])
 (ereader . [(20170810 501) ((emacs (24 4)) (dash (2 12 1)) (s (1 10 0)) (xml+ (0 0 0))) "Major mode for reading ebooks with org-mode integration" tar])
 (eros . [(20180415 618) ((emacs (24 4))) "Evaluation Result OverlayS for Emacs Lisp" tar])
 (esh-autosuggest . [(2 0 1) ((emacs (24 4)) (company (0 9 4))) "History autosuggestions for eshell" tar])
 (esh-help . [(1 0 1) ((dash (1 4 0))) "Add some help functions and support for Eshell" tar])
 (eshell-syntax-highlighting . [(0 3) ((emacs (25 1))) "Highlight eshell commands" tar])
 (eshell-z . [(0 4) ((cl-lib (0 5))) "cd to frequent directory in eshell" tar])
 (espuds . [(0 3 3) ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) "Ecukes step definitions" tar])
 (ess . [(18 10 2) ((julia-mode (0 3))) "Emacs Speaks Statistics" tar])
 (esup . [(0 7 1) ((cl-lib (0 5)) (emacs (25))) "the Emacs StartUp Profiler (ESUP)" tar])
 (eterm-256color . [(0 3 13) ((emacs (24 4)) (xterm-color (1 7)) (f (0 19 0))) "Customizable 256 colors for term." tar])
 (expand-region . [(0 11 0) nil "Increase selected region by semantic units." tar])
 (exwm . [(0 26) ((xelb (0 18))) "Emacs X Window Manager" tar])
 (exwm-edit . [(20220414 106) ((emacs (25 1))) "Edit mode for EXWM" tar])
 (exwm-mff . [(1 2 0) ((emacs (25))) "Mouse Follows Focus" tar])
 (f . [(0 20 0) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" tar])
 (faceup . [(20170925 1946) nil "Markup language for faces and font-lock regression testing" tar])
 (feature-mode . [(0 4) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar])
 (figlet . [(20160218 2237) nil "Annoy people with big, ascii art text" tar])
 (fill-page . [(0 3 7) ((emacs (24 4))) "Fill buffer so you don't see empty lines at the end" tar])
 (find-dupes-dired . [(1 0) ((emacs (26 1))) "Find dupes and handle in dired" tar])
 (find-file-in-project . [(6 2 0) ((emacs (25 1))) "Find file/directory and review Diff/Patch/Commit efficiently" tar])
 (find-file-rg . [(20220314 1540) ((emacs (25 1))) "Find file in project using ripgrep" tar])
 (flx . [(0 6 1) ((cl-lib (0 3))) "fuzzy matching with good sorting" tar])
 (flycheck . [(20220612 1800) ((dash (2 12 1)) (pkg-info (0 4)) (let-alist (1 0 4)) (seq (1 11)) (emacs (24 3))) "Onfly syntax checking" tar])
 (flycheck-cfn . [(20220221 1029) ((emacs (26 1)) (flycheck (31))) "Flycheck backend for AWS cloudformation" tar])
 (flycheck-clojure . [(0 1 5) ((cider (0 8 1)) (flycheck (0 22 -4 1)) (let-alist (1 0 1)) (emacs (24))) "Flycheck: Clojure support" tar])
 (flycheck-gradle . [(20190315 234) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Gradle." tar])
 (flycheck-inline . [(20200808 1019) ((emacs (25 1)) (flycheck (32))) "Display Flycheck errors inline" tar])
 (flycheck-jest . [(20220530 1418) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Jest." tar])
 (flycheck-kotlin . [(0 4) ((flycheck (0 20))) "Support kotlin in flycheck" tar])
 (flycheck-package . [(0 14) ((emacs (24 1)) (flycheck (0 22)) (package-lint (0 2))) "A Flycheck checker for elisp package authors" tar])
 (flycheck-plantuml . [(20171018 111) ((flycheck (0 24)) (emacs (24 4)) (plantuml-mode (1 2 2))) "Integrate plantuml with flycheck" tar])
 (flycheck-posframe . [(20210316 618) ((flycheck (0 24)) (emacs (26)) (posframe (0 7 0))) "Show flycheck error messages using posframe.el" tar])
 (flymake . [(1 2 2) ((emacs (26 1)) (eldoc (1 1 0)) (project (0 7 1))) "A universal onfly syntax checker" tar])
 (flymake-easy . [(0 10) nil "Helpers for easily building flymake checkers" tar])
 (flymake-json . [(0 1) ((flymake-easy (0 1))) "A flymake handler for json using jsonlint" tar])
 (flymake-racket . [(20210105 606) ((emacs (26 1))) "Flymake extension for Racket." tar])
 (flymake-shell . [(0 8) ((flymake-easy (0 1))) "A flymake syntax-checker for shell scripts" tar])
 (flymake-yaml . [(20130423 1548) ((flymake-easy (0 1))) "A flymake handler for YAML" tar])
 (focus . [(1 0 0) ((emacs (24 3)) (cl-lib (0 5))) "Dim the font color of text in surrounding sections" tar])
 (forge . [(0 3 1) ((emacs (25 1)) (closql (1 2 0)) (dash (2 19 1)) (emacsql-sqlite (3 0 0)) (ghub (3 5 4)) (let-alist (1 0 6)) (magit (3 3 0)) (markdown-mode (2 4)) (transient (0 3 6)) (yaml (0 3 4))) "Access Git forges from Magit." tar])
 (form-feed . [(0 2 3) nil "Display ^L glyphs as horizontal lines" tar])
 (format-all . [(20220510 2108) ((emacs (24 4)) (inheritenv (0 1)) (language-id (0 19))) "Auto-format C, C++, JS, Python, Ruby and 50 other languages" tar])
 (frame-local . [(20180330 940) ((emacs (25 1))) "Variables local to a frame" tar])
 (fringe-helper . [(1 0 1) nil "helper functions for fringe bitmaps" tar])
 (fzf . [(20211228 2005) ((emacs (24 4))) "A front-end for fzf." tar])
 (gcmh . [(20201116 2251) ((emacs (24))) "the Garbage Collector Magic Hack" tar])
 (geiser . [(0 24) ((emacs (25 1)) (transient (0 3)) (project (0 8 1))) "GNU Emacs and Scheme talk to each other" tar])
 (geiser-guile . [(0 23 2) ((emacs (25 1)) (geiser (0 23 2))) "Guile's implementation of the geiser protocols" tar])
 (general . [(20211203 120) ((emacs (24 4)) (cl-lib (0 5))) "Convenience wrappers for keybindings." tar])
 (german-holidays . [(0 2 0) nil "German holidays for Emacs calendar" tar])
 (ghub+ . [(0 3) ((emacs (25)) (ghub (2 0)) (apiwrap (0 5))) "a thick GitHub API client built on ghub" tar])
 (ghub . [(20220621 1746) ((emacs (25 1)) (compat (28 1 1 0)) (let-alist (1 0 6)) (treepy (0 1 1))) "Client libraries for Git forge APIs." tar])
 (git-blamed . [(20161028 1926) nil "Minor mode for incremental blame for Git" tar])
 (git-commit . [(20220615 1159) ((emacs (25 1)) (compat (28 1 1 2)) (transient (20210920)) (with-editor (20211001))) "Edit Git commit messages." tar])
 (git-grep . [(20200920 1751) ((projectile (0 10 0))) "Search tools using git grep" tar])
 (git-gutter . [(0 92) ((emacs (24 4))) "Port of Sublime Text plugin GitGutter" tar])
 (git-gutter-fringe . [(0 23) ((git-gutter (0 88)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) "Fringe version of git-gutter.el" tar])
 (git-messenger . [(0 18) ((emacs (24 3)) (popup (0 5 0))) "Pop up last commit information of current line" tar])
 (git-timemachine . [(4 11) ((emacs (24 3)) (transient (0 1 0))) "Walk through git revisions of a file" tar])
 (gitconfig-mode . [(1 3 1) ((emacs (24 3))) "Major mode for editing .gitconfig files" tar])
 (gitignore-mode . [(1 3 1) ((emacs (24 3))) "Major mode for editing .gitignore files" tar])
 (gntp . [(0 1) nil "Growl Notification Protocol for Emacs" tar])
 (gnu-apl-mode . [(20220404 341) ((emacs (27))) "Integrate GNU APL with Emacs" tar])
 (gnuplot . [(0 8 0) ((emacs (24 3))) "Major-mode and interactive frontend for gnuplot" tar])
 (gnuplot-mode . [(20171013 1616) nil "Major mode for editing gnuplot scripts" tar])
 (good-scroll . [(20211101 942) ((emacs (27 1))) "Good pixel line scrolling" tar])
 (google-translate . [(0 12 0) nil "Emacs interface to Google Translate." tar])
 (goto-chg . [(1 7 5) ((emacs (24 1))) "Go to last change" tar])
 (graphql . [(0 1 1) ((emacs (25))) "GraphQL utilities" tar])
 (graphviz-dot-mode . [(0 4 2) ((emacs (25 0))) "Mode for the dot-language used by graphviz (att)." tar])
 (greenbar . [(1 1) nil "Mark comint output with greenbar background" tar])
 (groovy-mode . [(2 1) ((s (1 12 0)) (emacs (24 3)) (dash (2 13 0))) "Major mode for Groovy source files" tar])
 (grugru . [(1 22 0) ((emacs (24 4))) "Rotate text at point" tar])
 (guix . [(0 5 2) ((emacs (24 3)) (dash (2 11 0)) (geiser (0 8)) (bui (1 2 0)) (magit-popup (2 1 0)) (edit-indirect (0 1 4))) "Interface for GNU Guix" tar])
 (hardhat . [(0 4 6) ((ignoramus (0 7 0))) "Protect against clobbering user-writable files" tar])
 (haskell-mode . [(17 2) ((emacs (25 1))) "A Haskell editing mode" tar])
 (hcl-mode . [(0 3) ((emacs (24 3))) "Major mode for Hashicorp" tar])
 (helm . [(3 8 5) ((helm-core (3 8 4)) (popup (0 5 3))) "Helm is an Emacs incremental and narrowing framework" tar])
 (helm-bibtex . [(2 0 0) ((helm (1 5 5)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A BibTeX bibliography manager based on Helm" tar])
 (helm-core . [(3 8 5) ((emacs (25 1)) (async (1 9 4))) "Development files for Helm" tar])
 (help-find-org-mode . [(20181204 234) ((emacs (24 4))) "Advise help to find org source over tangled code" tar])
 (helpful . [(0 19) ((emacs (25)) (dash (2 18 0)) (s (1 11 0)) (f (0 20 0)) (elisp-refs (1 2))) "A better *help* buffer" tar])
 (hercules . [(0 3 1) ((emacs (24 4)) (which-key (3 3 2))) "An autobased hydra banisher." tar])
 (hide-lines . [(20210513 1636) nil "Commands for hiding lines based on a regexp" tar])
 (hidepw . [(20200326 112) nil "Minor mode to hide passwords" tar])
 (hideshow-org . [(20120223 2250) nil "Provides org-mode like hide and show for hideshow.el" tar])
 (highlight-indent-guides . [(20200820 2328) ((emacs (24 1))) "Minor mode to highlight indentation" tar])
 (highlight-indentation . [(0 7 0) nil "Minor modes for highlighting indentation" tar])
 (highlight-symbol . [(1 3) nil "automatic and manual symbol highlighting" tar])
 (highlight-thing . [(20181229 1301) nil "Minimalistic minor mode to highlight current thing under point." tar])
 (hl-todo . [(3 4 2) ((emacs (25))) "highlight TODO and similar keywords" tar])
 (ht . [(2 3) ((dash (2 12 0))) "The missing hash table library for Emacs" tar])
 (htmlize . [(20210825 2150) nil "Convert buffer text and decorations to HTML." tar])
 (hydra . [(0 15 0) ((cl-lib (0 5)) (lv (0))) "Make bindings that stick around." tar])
 (iedit . [(20220216 717) nil "Edit multiple regions in the same way simultaneously." tar])
 (ignoramus . [(0 7 4) nil "Ignore backups, build files, et al." tar])
 (imenu-anywhere . [(1 1 6) ((cl-lib (0 5)) (emacs (25))) "ido/ivy/helm imenu across same mode/project/etc buffers" tar])
 (imenu-list . [(0 9) ((cl-lib (0 5))) "Show imenu entries in a separate buffer" tar])
 (indent-tools . [(20210622 1207) ((s (0)) (hydra (0)) (yafolding (0))) "Indent, navigate (and more) by blocks of indentation: yaml, python etc." tar])
 (inflections . [(2 6) ((cl-lib (0 5)) (emacs (24))) "convert english words between singular and plural" tar])
 (inheritenv . [(20210204 354) ((emacs (24 4))) "Make temp buffers inherit buffer-local environment variables" tar])
 (inline-docs . [(20220210 1402) ((emacs (24 3))) "Show inline contextual docs." tar])
 (inspector . [(0 5) ((emacs (27))) "Tool for inspection of Emacs Lisp objects." tar])
 (interaction-log . [(20160305 1301) ((cl-lib (0))) "exhaustive log of interactions with Emacs" tar])
 (iscroll . [(20220612 310) ((emacs (26 0))) "Smooth scrolling over images" tar])
 (iter2 . [(1 2) ((emacs (25 1))) "Reimplementation of Elisp generators" tar])
 (ivy . [(0 13 4) ((emacs (24 5))) "Incremental Vertical completYon" tar])
 (ivy-hydra . [(0 13 5) ((emacs (24 5)) (ivy (0 13 4)) (hydra (0 14 0))) "Additional key bindings for Ivy" tar])
 (ivy-posframe . [(0 6 3) ((emacs (26 0)) (posframe (1 0 0)) (ivy (0 13 0))) "Using posframe to show Ivy" tar])
 (ivy-prescient . [(5 2 1) ((emacs (25 1)) (prescient (5 2 1)) (ivy (0 11 0))) "prescient.el + Ivy" tar])
 (ivy-rich . [(0 1 6) ((emacs (24 5)) (ivy (0 8 0))) "More friendly display transformer for ivy." tar])
 (iy-go-to-char . [(3 2 1) nil "Go to next CHAR which is similar to f and t in vim" tar])
 (javap-mode . [(20120223 2208) nil "Javap major mode" tar])
 (jest . [(20220114 213) ((emacs (24 4)) (dash (2 18 0)) (magit-popup (2 12 0)) (projectile (0 14 0)) (s (1 12 0)) (js2-mode (20180301)) (cl-lib (0 6 1))) "helpers to run jest" tar])
 (journalctl-mode . [(0 8) ((emacs (24 1))) "Sample major mode for  viewing output journalctl" tar])
 (js2-mode . [(20211229) ((emacs (24 1)) (cl-lib (0 5))) "Improved JavaScript editing mode" tar])
 (json-mode . [(1 8 0) ((json-snatcher (1 0 0)) (emacs (24 4))) "Major mode for editing JSON files." tar])
 (json-reformat . [(0 0 6) nil "Reformatting tool for JSON" tar])
 (json-rpc . [(0 0 1) ((emacs (24 1)) (cl-lib (0 5))) "JSON-RPC library" tar])
 (json-snatcher . [(1 0 0) ((emacs (24))) "Grabs the path to JSON values in a JSON file" tar])
 (jsonrpc . [(1 0 15) ((emacs (25 2))) "JSON-RPC library" tar])
 (julia-mode . [(0 4) ((emacs (24 3))) "Major mode for editing Julia source code" tar])
 (jumplist . [(20151120 345) ((cl-lib (0 5))) "Jump like vim jumplist or ex jumplist" tar])
 (k8s-mode . [(20211121 518) ((emacs (24 3)) (yaml-mode (0 0 10))) "Major mode for Kubernetes configuration file" tar])
 (key-assist . [(20210722 758) ((emacs (24 3))) "Minibuffer keybinding cheatsheet and launcher" tar])
 (key-chord . [(0 6) nil "map pairs of simultaneously pressed keys to commands" tar])
 (keycast . [(1 2 0) ((emacs (25 3))) "Show current command and its key in the mode line" tar])
 (keyfreq . [(1 8) nil "track command frequencies" tar])
 (keypression . [(20200819 534) ((emacs (26 3))) "Keystroke visualizer" tar])
 (know-your-http-well . [(0 5 0) nil "Look up the meaning of HTTP headers, methods, relations, status codes" tar])
 (kotlin-mode . [(20220527 1646) ((emacs (24 3))) "Major mode for kotlin" tar])
 (kubernetes . [(20220621 808) ((emacs (25 1)) (dash (2 12 0)) (magit-section (3 1 1)) (magit-popup (2 13 0)) (with-editor (3 0 4)) (request (0 3 2)) (s (1 12 0)) (transient (0 3 0))) "Magit-like porcelain for Kubernetes" tar])
 (kubernetes-tramp . [(20181228 922) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for kubernetes containers" tar])
 (langtool . [(2 2 1) ((cl-lib (0 3))) "Grammar check utility using LanguageTool" tar])
 (langtool-ignore-fonts . [(20210526 2340) ((emacs (25 1)) (langtool (2 2 1))) "Force langtool to ignore certain fonts" tar])
 (language-id . [(0 19) ((emacs (24 3))) "Library to work with programming language identifiers" tar])
 (latex-extra . [(1 14) ((auctex (11 86 1)) (cl-lib (0 5))) "Adds several useful functionalities to LaTeX-mode." tar])
 (latex-preview-pane . [(20181008 1822) nil "Makes LaTeX editing less painful by providing a updatable preview pane" tar])
 (lcr . [(1 1) ((dash (2 12 0)) (emacs (25 1))) "lightweight coroutines" tar])
 (let-alist . [(1 0 6) ((emacs (24 1))) "Easily letlist by their names" tar])
 (lf . [(20210808 1921) ((s (1 12 0)) (dash (2 16 0)) (emacs (27 1))) "A Language Features library for Emacs Lisp" tar])
 (lispy . [(20220209 1138) ((emacs (24 3)) (ace-window (0 9 0)) (iedit (0 9 9)) (swiper (0 13 4)) (hydra (0 14 0)) (zoutline (0 1 0))) "vi-like Paredit" tar])
 (list-utils . [(0 4 6) nil "List-manipulation utility functions" tar])
 (litable . [(20200130 1329) ((dash (2 6 0))) "dynamic evaluation replacement with emacs" tar])
 (log4e . [(0 3 3) nil "provide logging framework for elisp" tar])
 (loop . [(1 3) nil "friendly imperative loop structures" tar])
 (lsp-java . [(3 1) ((emacs (25 1)) (lsp-mode (6 0)) (markdown-mode (2 3)) (dash (2 14 1)) (f (0 20 0)) (ht (2 0)) (dash-functional (1 2 0)) (request (0 3 0)) (treemacs (2 5)) (dap-mode (0 5))) "Java support for lsp-mode" tar])
 (lsp-ltex . [(0 2 1) ((emacs (26 1)) (lsp-mode (6 1)) (f (0 20 0)) (s (1 12 0))) "LSP Clients for LTEX" tar])
 (lsp-metals . [(1 2 0) ((emacs (26 1)) (scala-mode (1 1)) (lsp-mode (7 0)) (lsp-treemacs (0 2)) (dap-mode (0 3)) (dash (2 18 0)) (f (0 20 0)) (ht (2 0)) (treemacs (2 5))) "Scala Client settings" tar])
 (lsp-mode . [(8 0 0) ((emacs (26 1)) (dash (2 18 0)) (f (0 20 0)) (ht (2 3)) (spinner (1 7 3)) (markdown-mode (2 3)) (lv (0))) "LSP mode" tar])
 (lsp-treemacs . [(20220502 459) ((emacs (26 1)) (dash (2 18 0)) (f (0 20 0)) (ht (2 0)) (treemacs (2 5)) (lsp-mode (6 0))) "LSP treemacs" tar])
 (lsp-ui . [(8 0 0) ((emacs (26 1)) (dash (2 18 0)) (lsp-mode (6 0)) (markdown-mode (2 3))) "UI modules for lsp-mode" tar])
 (lv . [(0 15 0) nil "Other echo area" tar])
 (macrostep . [(0 9) ((cl-lib (0 5))) "interactive macro expander" tar])
 (magit . [(20220621 1746) ((emacs (25 1)) (compat (28 1 1 2)) (dash (20210826)) (git-commit (20220222)) (magit-section (20220325)) (transient (20220325)) (with-editor (20220318))) "A Git porcelain inside Emacs." tar])
 (magit-delta . [(20220125 50) ((emacs (25 1)) (magit (20200426)) (xterm-color (2 0))) "Use Delta when displaying diffs in Magit" tar])
 (magit-gitflow . [(2 2 3) ((magit (2 1 0)) (magit-popup (2 2 0))) "gitflow extension for magit" tar])
 (magit-lfs . [(0 4 1) ((emacs (24 4)) (magit (2 10 3)) (dash (2 13 0))) "Magit plugin for Git LFS" tar])
 (magit-popup . [(2 13 3) ((emacs (24 4)) (dash (2 13 0))) "Define prefixsuffix command combos" tar])
 (magit-section . [(20220615 1159) ((emacs (25 1)) (compat (28 1 1 2)) (dash (20210826))) "Sections for read-only buffers." tar])
 (magit-todos . [(1 5 3) ((emacs (25 2)) (async (1 9 2)) (dash (2 13 0)) (f (0 17 2)) (hl-todo (1 9 0)) (magit (2 13 0)) (pcre2el (1 8)) (s (1 12 0))) "Show source file TODOs in Magit" tar])
 (major-mode-hydra . [(0 2 2) ((dash (2 15 0)) (pretty-hydra (0 2 2)) (emacs (25))) "Major mode keybindings managed by Hydra" tar])
 (markdown-mode . [(2 5) ((emacs (25 1))) "Major mode for Markdown-formatted text" tar])
 (masm-mode . [(20200308 1450) ((emacs (25 1))) "MASM x86 and x64 assembly major mode" tar])
 (math-symbol-lists . [(1 3) nil "Lists of Unicode math symbols and latex commands" tar])
 (maxframe . [(0 5) nil "No description available." tar])
 (maxima . [(20220531 1751) ((emacs (25 1)) (s (1 11 0)) (test-simple (1 3 0))) "Major mode for Maxima" tar])
 (memoize . [(1 1) nil "Memoization functions" tar])
 (minimap . [(1 4) nil "Sidebar showing a mini-map of a buffer" tar])
 (mlscroll . [(20210601 2158) ((emacs (27 1))) "A scroll bar for the modeline" tar])
 (multiple-cursors . [(1 4 0) ((cl-lib (0 5))) "Multiple cursors for Emacs." tar])
 (names . [(20151201 0) ((emacs (24 1)) (cl-lib (0 5))) "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols." tar])
 (nasm-mode . [(1 1 1) ((emacs (24 3))) "NASM x86 assembly major mode" tar])
 (native-complete . [(20220124 1806) ((emacs (26 1))) "Shell completion using native complete mechanisms" tar])
 (nix-mode . [(1 4 5) ((emacs (25))) "Major mode for editing .nix files" tar])
 (nixos-options . [(20160209 1841) ((emacs (24))) "Interface for browsing and completing NixOS options." tar])
 (nlinum . [(1 9) nil "Show line numbers in the margin" tar])
 (noccur . [(0 2) nil "Run multi-occur on project/dired files" tar])
 (nroam . [(20210325 2015) ((emacs (26 1)) (org-roam (1 2 3)) (org (9 4 4))) "Orgmode buffers" tar])
 (nswbuff . [(20220426 2050) ((emacs (25 1))) "Quick switching between buffers." tar])
 (oauth2 . [(0 16) ((cl-lib (0 5)) (nadvice (0 3))) "OAuth 2.0 Authorization Protocol" tar])
 (ob-async . [(1 0 0) ((async (1 9)) (org (9 0 1)) (emacs (24 4)) (dash (2 14 1))) "Asynchronous org-babel src block execution" tar])
 (ob-browser . [(20170720 1918) ((org (8))) "Render HTML in org-mode blocks." tar])
 (ob-clojurescript . [(20180406 1828) ((emacs (24 4)) (org (9 0))) "org-babel functions for ClojureScript evaluation" tar])
 (ob-elixir . [(20170725 1419) ((org (8))) "org-babel functions for elixir evaluation" tar])
 (ob-kotlin . [(20180823 1321) ((org (8))) "org-babel functions for kotlin evaluation" tar])
 (ob-lfe . [(20170725 1420) ((org (8))) "org-babel functions for lfe evaluation" tar])
 (ob-mermaid . [(20200320 1504) nil "org-babel support for mermaid evaluation" tar])
 (ob-mongo . [(20170720 1919) ((org (8))) "Execute mongodb queries within org-mode blocks." tar])
 (ob-restclient . [(20220618 2139) ((restclient (0))) "orgmode" tar])
 (ob-rust . [(20210204 244) nil "Org-babel functions for Rust" tar])
 (ob-translate . [(0 1 2) ((google-translate (0 4)) (org (8))) "Translation of text blocks in org-mode." tar])
 (ob-typescript . [(20190910 946) ((emacs (24)) (org (8 0))) "org-babel functions for typescript evaluation" tar])
 (org . [(9 5 4) ((emacs (25 1))) "Outline-based notes management and organizer" tar])
 (org-appear . [(0 3 0) ((emacs (25 1)) (org (9 3))) "Auto-toggle Org elements" tar])
 (org-bullets . [(0 2 4) nil "Show bullets in org8 characters" tar])
 (org-caldav . [(20200510 2030) ((org (7))) "Sync org files with external calendar through CalDAV" tar])
 (org-category-capture . [(1 1 0) ((org (9 0 0)) (emacs (24))) "Contextualy capture of org-mode TODOs." tar])
 (org-download . [(20210118 958) ((emacs (24 3)) (async (1 2))) "Image dragmode." tar])
 (org-edit-latex . [(0 8 3) ((emacs (24 4)) (auctex (11 90))) "Edit embedded LaTeX in a dedicated buffer" tar])
 (org-fragtog . [(0 4 1) ((emacs (27 1))) "Auto-toggle Org LaTeX fragments" tar])
 (org-gcal . [(0 2) ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4))) "Org sync with Google Calendar" tar])
 (org-inline-anim . [(0 2) ((emacs (25 3)) (org (9 4))) "Inline playback of animated GIF/PNG for Org" tar])
 (org-noter . [(20191020 1212) ((emacs (24 4)) (cl-lib (0 6)) (org (9 0))) "A synchronized, Org-mode, document annotator" tar])
 (org-noter-pdftools . [(20220320 300) ((emacs (26 1)) (org (9 4)) (pdf-tools (0 8)) (org-pdftools (1 0)) (org-noter (1 4 1))) "Integration between orgnoter" tar])
 (org-password-manager . [(0 0 1) ((org (8 2 10)) (s (1 9 0))) "Minimal password manager for Emacs Org Mode." tar])
 (org-pdftools . [(20220320 301) ((emacs (26 1)) (org (9 3 6)) (pdf-tools (0 8)) (org-noter (1 4 1))) "Support for links to documents in pdfview mode" tar])
 (org-pdfview . [(0 4) ((org (6 1)) (pdf-tools (0 40))) "Support for links to documents in pdfview mode" tar])
 (org-pretty-tags . [(0 2 2) ((emacs (25))) "Surrogates for tags" tar])
 (org-ql . [(0 6 2) ((emacs (26 1)) (dash (2 18 1)) (f (0 17 2)) (map (2 1)) (org (9 0)) (org-super-agenda (1 2)) (ov (1 0 6)) (peg (1 0)) (s (1 12 0)) (transient (0 1)) (ts (0 2 -1))) "Org Query Language, search command, and agenda-like view" tar])
 (org-ref . [(20220612 1243) ((org (9 4)) (dash (0)) (s (0)) (f (0)) (htmlize (0)) (hydra (0)) (avy (0)) (parsebib (0)) (bibtex-completion (0)) (citeproc (0)) (ox-pandoc (0))) "citations, crossmode" tar])
 (org-review . [(20220411 1205) nil "schedule reviews for Org entries" tar])
 (org-roam . [(20220621 527) ((emacs (26 1)) (dash (2 13)) (org (9 4)) (emacsql (3 0 0)) (emacsql-sqlite (1 0 0)) (magit-section (3 0 0))) "A database abstraction layer for Org-mode" tar])
 (org-roam-bibtex . [(0 6 2) ((emacs (27 2)) (org-roam (2 0 0)) (bibtex-completion (2 0 0))) "Org Roam meets BibTeX" tar])
 (org-roam-server . [(20210723 1424) ((org-roam (1 2 1)) (org (9 3)) (emacs (26 1)) (dash (2 17 0)) (simple-httpd (1 5 1)) (s (1 12 0)) (f (0 20 0))) "Org Roam Database Visualizer" tar])
 (org-roam-ui . [(20220225 2151) ((emacs (27 1)) (org-roam (2 0 0)) (simple-httpd (20191103 1446)) (websocket (1 13))) "User Interface for Org-roam" tar])
 (org-sidebar . [(20210912 1321) ((emacs (26 1)) (s (1 10 0)) (dash (2 18)) (org (9 0)) (org-ql (0 2)) (org-super-agenda (1 0))) "Helpful sidebar for Org buffers" tar])
 (org-sticky-header . [(1 1) ((emacs (24 4)) (org (8 3 5))) "Show off-screen Org heading at top of window" tar])
 (org-super-agenda . [(20210928 916) ((emacs (26 1)) (s (1 10 0)) (dash (2 13)) (org (9 0)) (ht (2 2)) (ts (0 2))) "Supercharge your agenda" tar])
 (org-table-sticky-header . [(0 1 1) ((org (8 2 10))) "Sticky header for org-mode tables" tar])
 (org-tag-beautify . [(20220602 940) ((emacs (26 1)) (org-pretty-tags (0 2 2)) (all-the-icons (4 0 0))) "Beautify Org Mode tags" tar])
 (org-tree-slide . [(2 8 18) ((emacs (24 4))) "A presentation tool for org-mode" tar])
 (org-view-mode . [(20220218 2106) ((emacs (25 1))) "Read-only viewer with less markup clutter in org mode files" tar])
 (orgit . [(1 8 0) ((emacs (25 1)) (magit (3 0)) (org (9 4))) "support for Org links to Magit buffers" tar])
 (ov . [(20200326 1042) ((emacs (24 3))) "Overlay library for Emacs Lisp" tar])
 (ox-clip . [(20220117 1909) ((org (8 2)) (htmlize (0))) "Crossmode" tar])
 (ox-pandoc . [(1 150707) ((org (8 2)) (emacs (24)) (dash (2 8)) (ht (2 0))) "org exporter for pandoc." tar])
 (ox-reveal . [(20220524 1144) ((org (8 3))) "reveal.js Presentation Back-End for Org Export Engine" tar])
 (package-lint . [(0 16) ((cl-lib (0 5)) (emacs (24 1)) (let-alist (1 0 6))) "A linting library for elisp package authors" tar])
 (paradox . [(2 5 4) ((emacs (24 4)) (seq (1 7)) (let-alist (1 0 3)) (spinner (1 7 3)) (hydra (0 13 2))) "A modern Packages Menu. Colored, with package ratings, and customizable." tar])
 (paredit . [(24) nil "minor mode for editing parentheses" tar])
 (parsebib . [(3 1) ((emacs (25 1))) "A library for parsing bib files" tar])
 (parseclj . [(20220422 936) ((emacs (25))) "Clojure/EDN parser" tar])
 (parseedn . [(20220520 835) ((emacs (26)) (parseclj (1 1 0)) (map (2))) "Clojure/EDN parser" tar])
 (pcre2el . [(1 8) ((emacs (24)) (cl-lib (0 3))) "regexp syntax converter" tar])
 (pcsv . [(1 3 6) nil "Parser of csv" tar])
 (pdf-tools . [(1 0) ((emacs (24 3)) (tablist (1 0)) (let-alist (1 0 4))) "Support library for PDF documents" tar])
 (peg . [(1 0) ((emacs (25))) "Parsing Expression Grammars in Emacs Lisp" tar])
 (pfuture . [(1 10 3) ((emacs (25 2))) "a simple wrapper around asynchronous processes" tar])
 (pkg-info . [(0 6) ((epl (0 8))) "Information about packages" tar])
 (plantuml-mode . [(1 4 1) ((dash (2 0 0)) (emacs (25 0))) "Major mode for PlantUML" tar])
 (pomm . [(0 1 4) ((emacs (27 1)) (alert (1 2)) (seq (2 22)) (transient (0 3 0))) "Yet another Pomodoro timer implementation" tar])
 (pomodoro . [(20210225 2018) nil "A timer for the Pomodoro Technique" tar])
 (popup . [(0 5 9) ((emacs (24 3))) "Visual Popup User Interface" tar])
 (popwin . [(1 0 2) ((emacs (24 3))) "Popup Window Manager" tar])
 (pos-tip . [(20191227 1356) nil "Show tooltip at point" tar])
 (posframe . [(20220528 27) ((emacs (26 1))) "Pop a posframe (just a frame) at point" tar])
 (powerline . [(2 4) ((cl-lib (0 2))) "Rewrite of Powerline" tar])
 (prescient . [(20220601 1652) ((emacs (25 1))) "Better sorting and filtering" tar])
 (prettier-js . [(20180109 726) nil "Minor mode to format JS code on file save" tar])
 (prettify-greek . [(20160603 908) nil "Greek letters for prettify-symbols" tar])
 (pretty-hydra . [(0 2 2) ((hydra (0 15 0)) (s (1 12 0)) (dash (2 15 0)) (dash-functional (1 2 0)) (emacs (24))) "A macro for creating nice-looking hydras" tar])
 (pretty-mode . [(2 0 3) nil "Redisplay parts of the buffer as pretty symbols." tar])
 (project . [(0 8 1) ((emacs (26 1)) (xref (1 0 2))) "Operations on the current project" tar])
 (projectile . [(2 5 0) ((emacs (25 1))) "Manage and navigate projects in Emacs easily" tar])
 (promise . [(1 1) ((emacs (25 1))) "Promises/A+" tar])
 (pulsar . [(0 3 1) ((emacs (27 1))) "Pulse highlight on demand or after select functions" tar])
 (pyvenv . [(1 21) nil "Python virtual environment interface" tar])
 (queue . [(0 2) nil "Queue data structure" tar])
 (quick-peek . [(20200130 2059) ((emacs (24 3))) "Inline quick-peek windows" tar])
 (quickrun . [(2 3 1) ((emacs (24 3))) "Run commands quickly" tar])
 (racket-mode . [(20220619 1429) ((emacs (25 1))) "Racket editing, REPL, and more" tar])
 (rainbow-delimiters . [(2 1 5) nil "Highlight brackets according to their depth" tar])
 (rainbow-identifiers . [(0 2 2) ((emacs (24))) "Highlight identifiers according to their names" tar])
 (rainbow-mode . [(1 0 6) nil "Colorize color names in buffers" tar])
 (refine . [(0 3) ((emacs (24 3)) (s (1 11 0)) (dash (2 12 0)) (list-utils (0 4 4)) (loop (1 2))) "interactive value editing" tar])
 (reformatter . [(0 6) ((emacs (24 3))) "Define commands which run reformatters on the current buffer" tar])
 (request . [(20220614 1604) ((emacs (24 4))) "Compatible layer for URL request" tar])
 (request-deferred . [(0 3 2) ((deferred (0 3 1)) (request (0 2 0))) "Wrap request.el by deferred" tar])
 (restclient . [(20220101 1239) nil "An interactive HTTP client for Emacs" tar])
 (restclient-test . [(0 3) ((emacs (26 1)) (restclient (0))) "Run tests with restclient.el" tar])
 (rich-minority . [(1 0 3) ((cl-lib (0 5))) "Cleanmodes." tar])
 (s . [(1 12 0) nil "The long lost Emacs string manipulation library." tar])
 (sbt-mode . [(2 0 0) ((emacs (24 4))) "Interactive support for sbt projects" tar])
 (scala-mode . [(20210414 1126) nil "Major mode for editing Scala" tar])
 (scalariform . [(20190114 215) ((s (1 12 0)) (f (0 20 0))) "Format Scala code with scalariform." tar])
 (scihub . [(20220423 421) ((emacs (27 1))) "Sci-Hub integration" tar])
 (scratch . [(1 4) ((emacs (25 1))) "Mode-specific scratch buffers" tar])
 (scratch-comment . [(20200812 1025) ((emacs (26 1))) "Insert Elisp result as comment in scratch buffer" tar])
 (scribble-mode . [(20190912 200) ((emacs (24))) "Major mode for editing Scribble documents" tar])
 (selected . [(20220509 1810) nil "Keymap for when region is active" tar])
 (selectrum . [(3 1) ((emacs (25 1))) "Easily select item from list" tar])
 (selectrum-prescient . [(5 2 1) ((emacs (25 1)) (prescient (5 2 1)) (selectrum (3 1))) "Selectrum integration" tar])
 (seq . [(2 23) nil "Sequence manipulation functions" tar])
 (sesman . [(0 3 4) ((emacs (25))) "Generic Session Manager" tar])
 (session . [(2 3 1) nil "use variables, registers and buffer places across sessions" tar])
 (shackle . [(1 0 4) ((cl-lib (0 5))) "Enforce rules for popups" tar])
 (share2computer . [(20200316 31) ((emacs (25 1))) "Elisp helper of android ShareToComputer" tar])
 (shell-here . [(20220102 1703) nil "Open a shell relative to the working directory" tar])
 (shell-pop . [(0 64) ((emacs (24)) (cl-lib (0 5))) "helps you to use shell easily on Emacs. Only one key action to work." tar])
 (shellcop . [(0 1 0) ((emacs (25 1))) "Analyze info&error in shell-mode" tar])
 (show-font-mode . [(20201225 2217) ((emacs (25 1))) "Show font at point on mode line" tar])
 (shrface . [(2 6 3) ((emacs (25 1)) (org (9 0))) "Extend shr/eww with org features and analysis capability" tar])
 (shrink-path . [(0 3 1) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0))) "fish-style path" tar])
 (shut-up . [(0 3 3) ((cl-lib (0 3)) (emacs (24))) "Shut up would you!" tar])
 (shx . [(1 5 0) ((emacs (24 4))) "Extras for the comint-mode shell" tar])
 (simple-httpd . [(20191103 1446) ((cl-lib (0 3))) "pure elisp HTTP server" tar])
 (sketch-mode . [(1 0 4) nil "Quickly create svg sketches using keyboard and mouse" tar])
 (slack . [(20211129 310) ((websocket (1 8)) (request (0 2 0)) (oauth2 (0 10)) (circe (2 2)) (alert (1 2)) (emojify (0 2))) "Slack client for Emacs" tar])
 (smart-hungry-delete . [(20220516 1538) ((emacs (24 3))) "smart hungry deletion of whitespace" tar])
 (smart-mode-line . [(2 14) ((emacs (24 3)) (rich-minority (0 1 1))) "A color coded smart mode-line." tar])
 (smart-mode-line-powerline-theme . [(2 14) ((emacs (24 3)) (powerline (2 2)) (smart-mode-line (2 5))) "smartline theme that mimics the powerline appearance." tar])
 (smart-region . [(20150903 1403) ((emacs (24 4)) (expand-region (0 10 0)) (multiple-cursors (1 3 0)) (cl-lib (0 5))) "Smartly select region, rectangle, multi cursors" tar])
 (smartparens . [(4 7 1) nil "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar])
 (smartrep . [(1 0 0) nil "Support sequential operation which omitted prefix keys." tar])
 (smartscan . [(0 2) nil "Jumps between other symbols found at point" tar])
 (smeargle . [(0 3) ((emacs (24 3))) "Highlighting region by last updated time" tar])
 (smtpmail-multi . [(20160218 2349) nil "Use different smtp servers for sending mail" tar])
 (spinner . [(1 7 4) ((emacs (24 3))) "Add spinners and progressline for ongoing operations" tar])
 (ssass-mode . [(0 2) ((emacs (24 3))) "Edit Sass without a Turing Machine" tar])
 (string-inflection . [(1 0 16) nil "underscore > lowerCamelCase conversion of names" tar])
 (subed . [(1 0 5) ((emacs (25 1))) "A major mode for editing subtitles" tar])
 (sublimity . [(20160629) nil "smoothfree mode" tar])
 (suggest . [(0 7) ((emacs (24 4)) (loop (1 3)) (dash (2 13 0)) (s (1 11 0)) (f (0 18 2)) (spinner (1 7 3))) "suggest elisp functions that give the output requested" tar])
 (swiper . [(0 13 4) ((emacs (24 5)) (ivy (0 13 4))) "Isearch with an overview. Oh, man!" tar])
 (symbol-overlay . [(20220304 917) ((emacs (24 3)) (seq (2 2))) "Highlight symbols with keymap-enabled overlays" tar])
 (symbolist . [(20211107 1615) ((emacs (24 5))) "List and interactively unbind Emacs Lisp symbols" tar])
 (sysctl . [(20200615 1824) ((emacs (26))) "Manage sysctl though org-mode" tar])
 (syslog-mode . [(3 0) ((hide-lines (20130623)) (ov (20150311))) "Major-mode for viewing log files" tar])
 (system-packages . [(1 1 0) ((emacs (24 3))) "functions to manage system packages" tar])
 (tablist . [(1 0) ((emacs (24 3))) "Extended tabulatedmode" tar])
 (terraform-doc . [(20211003 1333) ((emacs (24 4))) "Look up terraform documentation on the fly" tar])
 (terraform-mode . [(0 6) ((emacs (24 3)) (hcl-mode (0 3))) "Major mode for terraform configuration file" tar])
 (test-simple . [(20200722 1121) ((cl-lib (0))) "Simple Unit Test Framework for Emacs Lisp" tar])
 (tide . [(4 5 4) ((emacs (25 1)) (dash (2 10 0)) (s (1 11 0)) (flycheck (27)) (typescript-mode (0 1)) (cl-lib (0 5))) "Typescript Interactive Development Environment" tar])
 (tramp . [(2 5 2 5) ((emacs (25 1))) "Transparent Remote Access, Multiple Protocol" tar])
 (tramp-term . [(20220412 1546) nil "Automatic setup of directory tracking in ssh sessions" tar])
 (transient . [(20220527 2213) ((emacs (25 1)) (compat (28 1 1 0))) "Transient commands" tar])
 (transient-posframe . [(20210102 130) ((emacs (26 0)) (posframe (0 4 3)) (transient (0 2 0))) "Using posframe to show transient" tar])
 (transpose-frame . [(20200307 2119) nil "Transpose windows arrangement in a frame" tar])
 (tree-sitter . [(20220212 1632) ((emacs (25 1)) (tsc (0 18 0))) "Incremental parsing system" tar])
 (tree-sitter-langs . [(20220508 636) ((emacs (25 1)) (tree-sitter (0 15 0))) "Grammar bundle for tree-sitter" tar])
 (treemacs . [(20220622 2016) ((emacs (26 1)) (cl-lib (0 5)) (dash (2 11 0)) (s (1 12 0)) (ace-window (0 9 0)) (pfuture (1 7)) (hydra (0 13 2)) (ht (2 2)) (cfrs (1 3 2))) "A tree style file explorer package" tar])
 (treemacs-icons-dired . [(2 10) ((treemacs (0 0)) (emacs (26 1))) "Treemacs icons for dired" tar])
 (treemacs-magit . [(2 10) ((emacs (26 1)) (treemacs (0 0)) (pfuture (1 3)) (magit (2 90 0))) "Magit integration for treemacs" tar])
 (treemacs-projectile . [(2 10) ((emacs (26 1)) (projectile (0 14 0)) (treemacs (0 0))) "Projectile integration for treemacs" tar])
 (treepy . [(20191108 2217) ((emacs (25 1))) "Generic tree traversal tools" tar])
 (treeview . [(20210723 2256) ((emacs (24 4))) "A generic tree navigation library" tar])
 (ts . [(20210813 1617) ((emacs (26 1)) (dash (2 14 1)) (s (1 12 0))) "Timestamp and date/time library" tar])
 (ts-comint . [(20181219 719) nil "Run a Typescript interpreter in an inferior process window." tar])
 (tsc . [(20220212 1632) ((emacs (25 1))) "Core Tree-sitter APIs" tar])
 (typed-clojure-mode . [(1 0 0) ((clojure-mode (2 1 1)) (cider (0 5 0))) "Typed Clojure minor mode for Emacs" tar])
 (typescript-mode . [(0 4) ((emacs (24 3))) "Major mode for editing typescript" tar])
 (undo-tree . [(0 8 2) ((queue (0 2)) (emacs (24 3))) "Treat undo history as a tree" tar])
 (use-package . [(2 4 1) ((emacs (24 3)) (bind-key (2 4))) "A configuration macro for simplifying your .emacs" tar])
 (use-package-ensure-system-package . [(20180913 1501) ((use-package (2 1)) (system-packages (1 0 4))) "auto install system packages" tar])
 (use-package-hydra . [(0 2) ((emacs (24 3)) (use-package (2 4))) "Adds :hydra keyword to use-package macro" tar])
 (uuid . [(20120910 851) nil "UUID's for EmacsLisp" tar])
 (validate . [(1 0 4) ((emacs (24 1)) (cl-lib (0 5)) (seq (2 16))) "Schema validation for Emacs-lisp" tar])
 (visual-regexp . [(1 1 2) ((cl-lib (0 2))) "A regexp/replace command for Emacs with interactive visual feedback" tar])
 (visual-regexp-steroids . [(1 1 0) ((visual-regexp (1 1))) "Extends visual-regexp to support other regexp engines" tar])
 (vlf . [(1 7 2) nil "View Large Files" tar])
 (vscode-icon . [(20201214 2227) ((emacs (25 1))) "Utility package to provide Vscode style icons" tar])
 (vue-html-mode . [(20180428 2035) nil "Major mode for editing Vue.js templates" tar])
 (w3m . [(20220606 2300) nil "an Emacs interface to w3m" tar])
 (wallpaper . [(20201019 2123) ((emacs (25 1))) "Setting the wallpaper" tar])
 (wallpreview . [(20220220 427) ((emacs (24 4))) "Set wallpapers with image-dired" tar])
 (web-mode . [(17 2 3) ((emacs (23 1))) "major mode for editing web templates" tar])
 (websocket . [(1 13 1) ((cl-lib (0 5))) "Emacs WebSocket client and server" tar])
 (wgrep . [(2 3 3) nil "Writable grep buffer and apply the changes to files" tar])
 (wgrep-ag . [(2 3 2) ((wgrep (2 1 5))) "Writable ag buffer and apply the changes to files" tar])
 (which-key . [(20220518 1941) ((emacs (24 4))) "Display available keybindings in popup" tar])
 (which-key-posframe . [(0 2 0) ((emacs (26 0)) (posframe (0 4 3)) (which-key (3 3 2))) "Using posframe to show which-key" tar])
 (winum . [(2 1 0) ((cl-lib (0 5)) (dash (2 13 0))) "Navigate windows and frames using numbers." tar])
 (with-editor . [(20220608 1017) ((emacs (25 1)) (compat (28 1 1 0))) "Use the Emacsclient as $EDITOR" tar])
 (wrap-region . [(0 7 3) ((dash (1 0 3))) "Wrap text with punctation or tag" tar])
 (ws-butler . [(0 6) nil "Unobtrusively remove trailing whitespace." tar])
 (wttrin . [(0 1 0) ((emacs (24 4)) (xterm-color (1 0))) "Emacs frontend for weather web service wttr.in" tar])
 (xelb . [(0 18) ((emacs (24 4)) (cl-generic (0 2))) "X protocol Emacs Lisp Binding" tar])
 (xml+ . [(20170727 2351) ((emacs (24 4)) (dash (2 12 0))) "Utilities for xml and html trees" tar])
 (xr . [(1 22) ((emacs (26 1))) "Convert string regexp to rx notation" tar])
 (xref . [(1 2 2) ((emacs (26 1))) "Cross-referencing commands" tar])
 (xterm-color . [(20200605 2017) ((emacs (24 4))) "ANSI, XTERM 256 and Truecolor support" tar])
 (yafolding . [(0 4 1) nil "Folding code blocks based on indentation" tar])
 (yaml . [(0 4 2) ((emacs (25 1))) "YAML parser for Elisp" tar])
 (yaml-mode . [(0 0 15) ((emacs (24 1))) "Major mode for editing YAML files" tar])
 (yaml-tomato . [(20151123 753) ((s (1 9))) "copy or show the yaml path currently under cursor." tar])
 (yarn-mode . [(1 0) ((emacs (24 3))) "Major mode for yarn.lock files." tar])
 (yascroll . [(0 2 0) ((emacs (26 1))) "Yet Another Scroll Bar Mode" tar])
 (yasnippet . [(0 14 0) ((cl-lib (0 5))) "Yet another snippet extension for Emacs" tar])
 (yaxception . [(0 3 3) nil "Provide framework about exception like Java for Elisp" tar])
 (ytdious . [(20210228 2111) ((emacs (25 3))) "Query / Preview YouTube via Invidious" tar])
 (zoutline . [(20220102 835) nil "Simple outline library." tar])
 (cl-generic . [(0 3) nil "Forward cl-generic compatibility for Emacs<25" tar])
)
