(1
 (a . [(20180907 953) ((emacs (25))) "Associative data structure functions" tar])
 (ace-flyspell . [(0 1 3) ((avy (0 4 0))) "Jump to and correct spelling errors using `acemode' and flyspell" tar])
 (ace-jump-helm-line . [(0 5 0) ((avy (0 4 0)) (helm (1 6 3))) "Ace-jump to a candidate in helm window" tar])
 (ace-jump-mode . [(2 0) nil "a quick cursor location minor mode for emacs" tar])
 (ace-link . [(0 5 0) ((avy (0 4 0))) "Quickly follow links" tar])
 (ace-mc . [(20190206 749) ((ace-jump-mode (1 0)) (multiple-cursors (1 0)) (dash (2 10 0))) "Add multiple cursors quickly using ace jump" tar])
 (ace-popup-menu . [(0 2 1) ((emacs (24 3)) (avy-menu (0 1))) "Replace GUI popup menu with something more efficient" tar])
 (ace-window . [(0 9 0) ((avy (0 2 0))) "Quickly switch windows." tar])
 (alert . [(1 3) ((gntp (0 1)) (log4e (0 3 0)) (cl-lib (0 5))) "Growl-style notification system for Emacs" tar])
 (all-the-icons . [(20190320 1809) ((emacs (24 3)) (memoize (1 0 1))) "A library for inserting Developer icons" tar])
 (all-the-icons-dired . [(20170418 2131) ((emacs (24 4)) (all-the-icons (2 2 0))) "Shows icons for each file in dired mode" tar])
 (anaphora . [(1 0 4) nil "anaphoric macros providing implicit temp variables" tar])
 (ansi . [(0 4 1) ((s (1 6 1)) (dash (1 5 0))) "Turn string into ansi strings" tar])
 (anzu . [(0 62) ((cl-lib (0 5)) (emacs (24))) "Show number of matches in mode-line while searching" tar])
 (apiwrap . [(0 5) ((emacs (25))) "api-wrapping macros" tar])
 (async . [(1 9 3) nil "Asynchronous processing in Emacs" tar])
 (atomic-chrome . [(2 0 0) ((emacs (24 3)) (let-alist (1 0 4)) (websocket (1 4))) "Edit Chrome text area with Emacs using Atomic Chrome" tar])
 (auctex . [(12 1 2) ((emacs (24 1)) (cl-lib (0 5))) "Integrated environment for *TeX*" tar])
 (auto-sudoedit . [(20190809 735) ((emacs (24)) (f (0 19 0))) "auto sudo edit by tramp" tar])
 (avy . [(0 5 0) ((emacs (24 1)) (cl-lib (0 5))) "Jump to arbitrary positions in visible text and select text quickly." tar])
 (avy-menu . [(0 1 1) ((emacs (24 3)) (avy (0 3 0))) "Library providing avy-powered popup menu" tar])
 (avy-zap . [(0 1 4) ((avy (0 2 0))) "Zap to char using `avy'" tar])
 (bash-completion . [(2 1 0) nil "BASH completion for the shell buffer" tar])
 (bbdb- . [(0 0 2) ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) "provide interface for more easily search/choice than BBDB." tar])
 (bbdb . [(20190609 316) nil "The Insidious Big Brother Database for GNU Emacs" tar])
 (bbdb-csv-import . [(20180122 49) ((pcsv (1 3 3)) (dash (2 5 0)) (bbdb (20140412 1949))) "import csv to bbdb version 3+" tar])
 (bbdb-ext . [(20151220 2013) ((bbdb (2 36))) "Extra commands for BBDB" tar])
 (beacon . [(1 3 4) ((seq (2 14))) "Highlight the cursor whenever the window scrolls" tar])
 (benchmark-init . [(1 0) nil "Benchmarks Emacs require and load calls" tar])
 (biblio . [(0 2) ((emacs (24 3)) (biblio-core (0 2))) "Browse and import bibliographic references from CrossRef, arXiv, DBLP, HAL, Dissemin, and doi.org" tar])
 (biblio-core . [(0 2) ((emacs (24 3)) (let-alist (1 0 4)) (seq (1 11)) (dash (2 12 1))) "A framework for looking up and displaying bibliographic entries" tar])
 (bind-chord . [(20171204 2010) ((bind-key (1 0)) (key-chord (0 6))) "keychords" tar])
 (bind-key . [(2 4) nil "A simple way to manage personal keybindings" tar])
 (blimp . [(20180903 2240) ((emacs (25)) (eimp (1 4 0))) "Bustling Image Manipulation Package" tar])
 (bm . [(201905) nil "Visible bookmarks in buffer." tar])
 (browse-kill-ring . [(2 0 0) nil "interactively insert items from kill-ring" tar])
 (cakecrumbs . [(20180929 139) ((emacs (24 4))) "Show parents on header for HTML/Jade/Sass/Stylus" tar])
 (change-inner . [(20150707 1544) ((expand-region (0 7))) "Change contents based on semantic units" tar])
 (cider . [(20190817 800) ((emacs (25)) (clojure-mode (5 9)) (parseedn (0 1)) (pkg-info (0 4)) (queue (0 2)) (spinner (1 7)) (seq (2 16)) (sesman (0 3 2))) "Clojure Interactive Development Environment that Rocks" tar])
 (cider-decompile . [(20151122 537) ((cider (0 3 0)) (javap-mode (9))) "decompilation extension for cider" tar])
 (cider-hydra . [(20190816 1121) ((cider (0 22 0)) (hydra (0 13 0))) "Hydras for CIDER." tar])
 (clj-refactor . [(2 4 0) ((emacs (25 1)) (s (1 8 0)) (seq (2 19)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (clojure-mode (5 6 1)) (cider (0 17 0)) (edn (1 1 2)) (inflections (2 3)) (hydra (0 13 2))) "A collection of commands for refactoring Clojure code" tar])
 (clojars . [(20180825 1951) ((request-deferred (0 2 0))) "clojars.org search interface" tar])
 (clojure-mode . [(5 11 0) ((emacs (25 1))) "Major mode for Clojure code" tar])
 (clojure-mode-extra-font-locking . [(5 11 0) ((clojure-mode (3 0))) "Extra font-locking for Clojure mode" tar])
 (closql . [(1 0 0) ((emacs (25 1)) (emacsql-sqlite (3 0 0))) "store EIEIO objects using EmacSQL" tar])
 (color-theme-sanityinc-tomorrow . [(1 17) nil "A version of Chris Kempson's various Tomorrow themes" tar])
 (command-log-mode . [(20160413 447) nil "log keyboard commands to buffer" tar])
 (commander . [(0 7 0) ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) "Emacs command line parser" tar])
 (company . [(0 9 10) ((emacs (24 3))) "Modular text completion framework" tar])
 (company-auctex . [(20180725 1912) ((yasnippet (0 8 0)) (company (0 8 0)) (auctex (11 87))) "Companycompletion for AUCTeX" tar])
 (company-bibtex . [(20171105 644) ((company (0 9 0)) (cl-lib (0 5)) (parsebib (1 0))) "Company completion for bibtex keys" tar])
 (company-box . [(20190311 1745) ((emacs (26 0 91)) (dash (2 13)) (dash-functional (1 2 0)) (company (0 9 6))) "Company front-end with icons" tar])
 (company-flx . [(20180103 518) ((emacs (24)) (company (0 8 12)) (flx (0 5))) "flx based fuzzy matching for company" tar])
 (company-fuzzy . [(20190812 204) ((emacs (24 4)) (company (0 8 12)) (s (1 12 0))) "Fuzzy matching for `company-mode'." tar])
 (company-ghci . [(20190707 311) ((company (0 8 11)) (haskell-mode (13))) "company backend which uses the current ghci process." tar])
 (company-lsp . [(2 1 0) ((emacs (25 1)) (lsp-mode (6 0)) (company (0 9 0)) (s (1 2 0)) (dash (2 11 0))) "Company completion backend for lsp-mode." tar])
 (company-math . [(1 3) ((company (0 8 0)) (math-symbol-lists (1 2))) "Completion backends for unicode math symbols and latex tags" tar])
 (company-nixos-options . [(20160215 857) ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) "Company Backend for nixos-options" tar])
 (company-restclient . [(0 3 0) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0)) (restclient (0 0 0))) "companymode" tar])
 (company-shell . [(1 2 1) ((emacs (24 4)) (company (0 8 12)) (dash (2 12 0)) (cl-lib (0 5))) "Company mode backend for shell functions" tar])
 (company-statistics . [(0 2 2) ((emacs (24 3)) (company (0 8 5))) "Sort candidates using completion history" tar])
 (company-terraform . [(1 3) ((emacs (24 4)) (company (0 8 12)) (terraform-mode (0 6))) "A company backend for terraform" tar])
 (company-try-hard . [(20150902 2206) ((emacs (24 3)) (company (0 8 0)) (dash (2 0))) "get all completions from company backends" tar])
 (counsel . [(0 12 0) ((emacs (24 3)) (swiper (0 12 0))) "Various completion functions using Ivy" tar])
 (cypher-mode . [(20151110 1142) nil "major mode for editing cypher scripts" tar])
 (dante . [(1 5) ((dash (2 12 0)) (emacs (25 1)) (f (0 19 0)) (flycheck (0 30)) (company (0 9)) (haskell-mode (13 14)) (s (1 11 0)) (lcr (1 0))) "Development mode for Haskell" tar])
 (dash . [(2 16 0) nil "A modern list library for Emacs" tar])
 (dash-at-point . [(20180710 1356) nil "Search the word at point with Dash" tar])
 (dash-functional . [(2 16 0) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" tar])
 (deferred . [(0 5 1) ((emacs (24 4))) "Simple asynchronous functions for emacs lisp" tar])
 (define-word . [(0 1 0) ((emacs (24 1))) "display the definition of word at point." tar])
 (dianyou . [(0 0 3) ((emacs (24 4))) "Search and analyze mails in Gnus" tar])
 (diminish . [(0 45) nil "Diminished modes are minor modes with no modeline display" tar])
 (dimmer . [(0 3 0) ((emacs (25))) "visually highlight the selected buffer" tar])
 (dired-collapse . [(20190515 1210) ((dash (2 10 0)) (f (0 19 0)) (dired-hacks-utils (0 0 1))) "Collapse unique nested paths in dired listing" tar])
 (dired-du . [(0 5 1) ((emacs (24 4)) (cl-lib (0 5))) "Dired with recursive directory sizes" tar])
 (dired-hacks-utils . [(20190522 950) ((dash (2 5 0))) "Utilities and helpers for dired-hacks collection" tar])
 (dired-imenu . [(0 5 0) nil "imenu binding for dired mode" tar])
 (dired-quick-sort . [(0 1) ((hydra (0 13 0))) "Persistent quick sorting of dired buffers in various ways." tar])
 (dired-rainbow . [(20190722 1109) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Extended file highlighting according to its type" tar])
 (dired-sidebar . [(20190516 159) ((emacs (25 1)) (dired-subtree (0 0 1))) "Tree browser leveraging dired" tar])
 (dired-subtree . [(20180922 1615) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Insert subdirectories in a tree-like fashion" tar])
 (direnv . [(2 0 0) ((emacs (24 4)) (dash (2 12 0))) "direnv support" tar])
 (docker . [(1 3 0) ((emacs (24 5)) (dash (2 14 1)) (docker-tramp (0 1)) (magit-popup (2 12 4)) (s (1 12 0)) (tablist (0 70)) (json-mode (1 7 0))) "Emacs interface to Docker" tar])
 (docker-tramp . [(0 1) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for docker containers" tar])
 (dockerfile-mode . [(1 2) nil "Major mode for editing Docker's Dockerfiles" tar])
 (doom-modeline . [(20181214 622) ((emacs (25 1)) (all-the-icons (1 0 0)) (shrink-path (0 2 0)) (eldoc-eval (0 1)) (dash (2 11 0))) "A minimal and modern modeline" tar])
 (dumb-jump . [(0 5 2) ((emacs (24 3)) (f (0 20 0)) (s (1 11 0)) (dash (2 9 0)) (popup (0 5 3))) "jump to definition for multiple languages without configuration." tar])
 (easy-escape . [(20161209 1544) nil "Improve readability of escape characters in regular expressions" tar])
 (easy-kill . [(0 9 3) ((emacs (24)) (cl-lib (0 5))) "kill & mark things easily" tar])
 (ecukes . [(0 6 17) ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) "Cucumber for Emacs." tar])
 (edit-at-point . [(20150716 1324) nil "edit(copy,cut..) current things(word,symbol..) under cursor" tar])
 (edit-indirect . [(0 1 5) ((emacs (24 3))) "Edit regions in separate buffers" tar])
 (editorconfig . [(0 8 0) ((cl-lib (0 5)) (emacs (24))) "EditorConfig Emacs Plugin" tar])
 (edn . [(1 1 2) ((cl-lib (0 3)) (emacs (24 1)) (dash (2 10 0)) (peg (0 6)) (s (1 8 0))) "Support for reading and writing the edn data format from elisp" tar])
 (eimp . [(20120826 2039) nil "Emacs Image Manipulation Package" tar])
 (eldoc-eval . [(1 1) nil "Enable eldoc support when minibuffer is in use." tar])
 (eldoc-overlay . [(20190223 543) ((emacs (24 3)) (inline-docs (1 0 1)) (quick-peek (1 0))) "Display eldoc with contextual documentation overlay." tar])
 (elfeed . [(3 1 0) ((emacs (24 3))) "an Emacs Atom/RSS feed reader" tar])
 (elfeed-goodies . [(20190128 1631) ((popwin (1 0 0)) (powerline (2 2)) (elfeed (2 0 0)) (cl-lib (0 5)) (noflet (0 0 10)) (ace-jump-mode (2 0))) "Elfeed goodies" tar])
 (elfeed-org . [(20181015 1100) ((elfeed (1 1 1)) (org (8 2 7)) (dash (2 10 0)) (s (1 9 0)) (cl-lib (0 5))) "Configure elfeed with one or more org-mode files" tar])
 (elisp-refs . [(1 3) ((dash (2 12 0)) (loop (1 2)) (s (1 11 0))) "find callers of elisp functions or macros" tar])
 (elisp-slime-nav . [(0 9) ((cl-lib (0 2))) "Make M, work in elisp like they do in slime" tar])
 (elixir-mode . [(2 3 1) ((emacs (24)) (pkg-info (0 4))) "Major mode for editing Elixir files" tar])
 (elm-mode . [(0 20 3) ((f (0 17)) (let-alist (1 0 4)) (s (1 7 0)) (emacs (24))) "Major mode for Elm" tar])
 (elpy . [(1 29 1) ((company (0 9 2)) (emacs (24 4)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0)) (s (1 11 0))) "Emacs Python Development Environment" tar])
 (emacsql . [(3 0 0) ((emacs (25 1))) "highend" tar])
 (emacsql-sqlite . [(3 0 0) ((emacs (25 1)) (emacsql (2 0 0))) "EmacSQL back-end for SQLite" tar])
 (embrace . [(0 1 4) ((cl-lib (0 5)) (expand-region (0 10 0))) "Add/Change/Delete pairs based on `expand-region'" tar])
 (emms . [(5 2) ((cl-lib (0 5))) "The Emacs Multimedia System" tar])
 (epl . [(0 9) ((cl-lib (0 3))) "Emacs Package Library" tar])
 (ereader . [(20170810 501) ((emacs (24 4)) (dash (2 12 1)) (s (1 10 0)) (xml+ (0 0 0))) "Major mode for reading ebooks with org-mode integration" tar])
 (eros . [(20180415 618) ((emacs (24 4))) "Evaluation Result OverlayS for Emacs Lisp" tar])
 (esh-autosuggest . [(2 0 1) ((emacs (24 4)) (company (0 9 4))) "History autosuggestions for eshell" tar])
 (esh-help . [(1 0 1) ((dash (1 4 0))) "Add some help functions and support for Eshell" tar])
 (eshell-z . [(0 3 2) ((cl-lib (0 5))) "cd to frequent directory in eshell" tar])
 (espuds . [(0 3 3) ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) "Ecukes step definitions" tar])
 (eterm-256color . [(0 3 13) ((emacs (24 4)) (xterm-color (1 7)) (f (0 19 0))) "Customizable 256 colors for term." tar])
 (expand-region . [(0 11 0) nil "Increase selected region by semantic units." tar])
 (exwm . [(0 22 1) ((xelb (0 16))) "Emacs X Window Manager" tar])
 (exwm-mff . [(1 0 6) ((emacs (25)) (exwm (0 22 1))) "Mouse Follows Focus" tar])
 (f . [(0 20 0) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" tar])
 (faceup . [(20170925 1946) nil "Markup language for faces and font-lock regression testing" tar])
 (fancy-battery . [(0 2) ((emacs (24 1))) "Fancy battery display" tar])
 (feature-mode . [(0 4) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar])
 (find-file-in-project . [(5 7 7) ((ivy (0 10 0)) (emacs (24 4))) "Find file/directory and review Diff/Patch/Commit efficiently everywhere" tar])
 (flx . [(0 6 1) ((cl-lib (0 3))) "fuzzy matching with good sorting" tar])
 (flycheck . [(20190807 813) ((dash (2 12 1)) (pkg-info (0 4)) (let-alist (1 0 4)) (seq (1 11)) (emacs (24 3))) "Onfly syntax checking" tar])
 (flycheck-clojure . [(0 1 5) ((cider (0 8 1)) (flycheck (0 22 -4 1)) (let-alist (1 0 1)) (emacs (24))) "Flycheck: Clojure support" tar])
 (flycheck-gradle . [(20190315 234) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Gradle." tar])
 (flycheck-inline . [(20190320 1611) ((emacs (25 1)) (flycheck (32))) "Display Flycheck errors inline" tar])
 (flycheck-jest . [(20180411 328) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Jest." tar])
 (flycheck-kotlin . [(0 4) ((flycheck (0 20))) "Support kotlin in flycheck" tar])
 (flycheck-package . [(0 12) ((flycheck (0 22)) (package-lint (0 2))) "A Flycheck checker for elisp package authors" tar])
 (flycheck-plantuml . [(20171018 111) ((flycheck (0 24)) (emacs (24 4)) (plantuml-mode (1 2 2))) "Integrate plantuml with flycheck" tar])
 (flycheck-pos-tip . [(0 3) ((emacs (24 1)) (flycheck (0 22)) (pos-tip (0 4 6))) "Display Flycheck errors in GUI tooltips" tar])
 (flycheck-posframe . [(20190712 515) ((flycheck (0 24)) (emacs (26)) (posframe (0 3 0))) "Show flycheck error messages using posframe.el" tar])
 (flycheck-tip . [(0 5 0) ((flycheck (0 13)) (emacs (24 1)) (popup (0 5 0))) "Show flycheck/flymake errors by tooltip" tar])
 (flymake-easy . [(0 10) nil "Helpers for easily building flymake checkers" tar])
 (flymake-json . [(0 1) ((flymake-easy (0 1))) "A flymake handler for json using jsonlint" tar])
 (flymake-racket . [(20180912 109) ((emacs (26 1))) "Flymake extension for Racket." tar])
 (flymake-shell . [(0 8) ((flymake-easy (0 1))) "A flymake syntax-checker for shell scripts" tar])
 (flymake-yaml . [(20130423 1548) ((flymake-easy (0 1))) "A flymake handler for YAML" tar])
 (focus . [(0 1 1) ((emacs (24)) (cl-lib (0 5))) "Dim the font color of text in surrounding sections" tar])
 (forge . [(0 1 0) ((emacs (25 1)) (closql (1 0 0)) (dash (2 14 1)) (emacsql-sqlite (3 0 0)) (ghub (3 0 0)) (graphql (0 1 1)) (let-alist (1 0 5)) (magit (2 90 1)) (magit-popup (2 12 5)) (markdown-mode (2 3))) "Access Git forges from Magit." tar])
 (form-feed . [(0 2 2) nil "Display ^L glyphs as horizontal lines" tar])
 (frame-local . [(20180330 940) ((emacs (25 1))) "Variables local to a frame" tar])
 (fringe-helper . [(1 0 1) nil "helper functions for fringe bitmaps" tar])
 (general . [(20190719 140) ((emacs (24 4)) (cl-lib (0 5))) "Convenience wrappers for keybindings." tar])
 (german-holidays . [(0 2 0) nil "German holidays for Emacs calendar" tar])
 (ghub+ . [(0 3) ((emacs (25)) (ghub (2 0)) (apiwrap (0 5))) "a thick GitHub API client built on ghub" tar])
 (ghub . [(3 2 0) ((emacs (25 1)) (dash (2 14 1)) (graphql (0 1 1)) (let-alist (1 0 5)) (treepy (0 1 1))) "Minuscule client libraries for Git forge APIs." tar])
 (git-blamed . [(20161028 1926) nil "Minor mode for incremental blame for Git" tar])
 (git-commit . [(2 90 1) ((emacs (25 1)) (dash (2 14 1)) (with-editor (2 8 0))) "Edit Git commit messages" tar])
 (git-gutter . [(0 90) ((cl-lib (0 5)) (emacs (24))) "Port of Sublime Text plugin GitGutter" tar])
 (git-gutter-fringe . [(0 23) ((git-gutter (0 88)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) "Fringe version of git-gutter.el" tar])
 (git-timemachine . [(4 11) ((emacs (24 3)) (transient (0 1 0))) "Walk through git revisions of a file" tar])
 (gitignore-mode . [(1 2 8) nil "Major mode for editing .gitignore files" tar])
 (gntp . [(0 1) nil "Growl Notification Protocol for Emacs" tar])
 (gnu-apl-mode . [(20181217 854) ((emacs (24))) "Integrate GNU APL with Emacs" tar])
 (google-translate . [(0 11 18) nil "Emacs interface to Google Translate." tar])
 (goto-chg . [(1 7 3) nil "goto last change" tar])
 (graphql . [(0 1 1) ((emacs (25))) "GraphQL utilities" tar])
 (groovy-mode . [(2 0) ((s (1 12 0)) (emacs (24 3))) "Major mode for Groovy source files" tar])
 (haskell-mode . [(16 1) ((emacs (24 3))) "A Haskell editing mode" tar])
 (hcl-mode . [(0 3) ((emacs (24 3))) "Major mode for Hashicorp" tar])
 (helm . [(3 3) ((emacs (24 4)) (async (1 9 3)) (popup (0 5 3)) (helm-core (3 0))) "Helm is an Emacs incremental and narrowing framework" tar])
 (helm-backup . [(1 1 1) ((helm (1 5 5)) (s (1 8 0)) (cl-lib (0))) "Backup each file change using git" tar])
 (helm-bibtex . [(2 0 0) ((helm (1 5 5)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A BibTeX bibliography manager based on Helm" tar])
 (helm-cider . [(0 4 0) ((emacs (24 4)) (cider (0 12)) (helm-core (2 4))) "Helm interface to CIDER" tar])
 (helm-cmd-t . [(20170125 1459) nil "cmd-t style completion" tar])
 (helm-company . [(0 2 5) ((helm (1 5 9)) (company (0 6 13))) "Helm interface for company-mode" tar])
 (helm-core . [(3 3) ((emacs (24 4)) (async (1 9 3))) "Development files for Helm" tar])
 (helm-dash . [(1 3 0) ((helm (1 9 2)) (cl-lib (0 5))) "Offline documentation browser for +150 APIs using Dash docsets." tar])
 (helm-descbinds . [(1 13) ((helm (1 5))) "A convenient `describe-bindings' with `helm'" tar])
 (helm-exwm . [(20180827 837) ((emacs (25 2)) (helm (2 8 5)) (exwm (0 15))) "Helm for EXWM buffers" tar])
 (helm-flx . [(20180103 516) ((emacs (24 4)) (helm (1 7 9)) (flx (0 5))) "Sort helm candidates by flx score" tar])
 (helm-git-grep . [(0 10 1) ((helm-core (2 2 0))) "helm for git grep, an incremental git-grep(1)" tar])
 (helm-gitignore . [(20170211 8) ((gitignore-mode (1 1 0)) (helm (1 7 0)) (request (0 1 0)) (cl-lib (0 5))) "Generate .gitignore files with gitignore.io." tar])
 (helm-ls-git . [(1 9 1) ((helm (1 7 8))) "list git files." tar])
 (helm-org-rifle . [(1 7 0) ((emacs (24 4)) (dash (2 12)) (f (0 18 1)) (helm (1 9 4)) (s (1 10 0))) "Rifle through your Org files" tar])
 (helm-posframe . [(20180610 1748) ((emacs (26 0)) (posframe (0 1 0)) (helm (0 1))) "Using posframe to show helm window" tar])
 (helm-projectile . [(0 14 0) ((helm (1 7 7)) (projectile (0 14 0)) (dash (1 5 0)) (cl-lib (0 3))) "Helm integration for Projectile" tar])
 (helm-swoop . [(2 0 0) ((helm (3 2)) (emacs (24 4))) "Efficiently hopping squeezed lines powered by helm interface" tar])
 (help-find-org-mode . [(20181204 234) ((emacs (24 4))) "Advise help to find org source over tangled code" tar])
 (helpful . [(0 17) ((emacs (25)) (dash (2 12 0)) (dash-functional (1 2 0)) (s (1 11 0)) (f (0 20 0)) (elisp-refs (1 2))) "a better *help* buffer" tar])
 (hideshow-org . [(20120223 2250) nil "Provides org-mode like hide and show for hideshow.el" tar])
 (highlight-indent-guides . [(20190108 3) ((emacs (24))) "Minor mode to highlight indentation" tar])
 (highlight-indentation . [(0 7 0) nil "Minor modes for highlighting indentation" tar])
 (highlight-symbol . [(1 3) nil "automatic and manual symbol highlighting" tar])
 (highlight-thing . [(20181229 1301) nil "Minimalistic minor mode to highlight current thing under point." tar])
 (hl-todo . [(3 0 0) ((emacs (25))) "highlight TODO and similar keywords" tar])
 (ht . [(2 2) ((dash (2 12 0))) "The missing hash table library for Emacs" tar])
 (htmlize . [(20180923 1829) nil "Convert buffer text and decorations to HTML." tar])
 (hydra . [(0 15 0) ((cl-lib (0 5)) (lv (0))) "Make bindings that stick around." tar])
 (iedit . [(20190419 803) nil "Edit multiple regions in the same way simultaneously." tar])
 (imenu-anywhere . [(1 1 4) ((cl-lib (0 5))) "ido/ivy/helm imenu across same mode/project/etc buffers" tar])
 (imenu-list . [(0 8) ((cl-lib (0 5))) "Show imenu entries in a seperate buffer" tar])
 (inflections . [(2 5) ((cl-lib (0 5)) (emacs (24))) "convert english words between singular and plural" tar])
 (inline-docs . [(20170523 450) ((emacs (24 3))) "Show inline contextual docs." tar])
 (interaction-log . [(20160305 1301) ((cl-lib (0))) "exhaustive log of interactions with Emacs" tar])
 (ivy . [(0 12 0) ((emacs (24 1))) "Incremental Vertical completYon" tar])
 (ivy-hydra . [(0 12 0) ((emacs (24 1)) (ivy (0 12 0)) (hydra (0 13 4))) "Additional key bindings for Ivy" tar])
 (iy-go-to-char . [(3 2 1) nil "Go to next CHAR which is similar to f and t in vim" tar])
 (javap-mode . [(20120223 2208) nil "Javap major mode" tar])
 (jest . [(20181216 459) ((emacs (24 4)) (dash (2 12 0)) (dash-functional (2 12 0)) (magit-popup (2 12 0)) (projectile (0 14 0)) (s (1 12 0)) (js2-mode (20180301)) (cl-lib (0 6 1))) "helpers to run jest" tar])
 (js2-mode . [(20190219) ((emacs (24 1)) (cl-lib (0 5))) "Improved JavaScript editing mode" tar])
 (json-mode . [(1 7 0) ((json-reformat (0 0 5)) (json-snatcher (1 0 0))) "Major mode for editing JSON files" tar])
 (json-reformat . [(0 0 6) nil "Reformatting tool for JSON" tar])
 (json-snatcher . [(1 0 0) ((emacs (24))) "Grabs the path to JSON values in a JSON file" tar])
 (jumplist . [(20151120 345) ((cl-lib (0 5))) "Jump like vim jumplist or ex jumplist" tar])
 (k8s-mode . [(20181231 741) ((emacs (24 3)) (yaml-mode (0 0 10))) "Major mode for Kubernetes configuration file" tar])
 (key-chord . [(0 6) nil "map pairs of simultaneously pressed keys to commands" tar])
 (keyfreq . [(1 8) nil "track command frequencies" tar])
 (know-your-http-well . [(0 5 0) nil "Look up the meaning of HTTP headers, methods, relations, status codes" tar])
 (kotlin-mode . [(20190116 2055) ((emacs (24 3))) "Major mode for kotlin" tar])
 (kubernetes . [(20190813 239) ((emacs (25 1)) (dash (2 12 0)) (magit (2 8 0)) (magit-popup (2 13 0))) "Magit-like porcelain for Kubernetes." tar])
 (kubernetes-helm . [(20190201 320) ((yaml-mode (0 0 13)) (emacs (25 3))) "extension for helm, the package manager for kubernetes" tar])
 (kubernetes-tramp . [(20181228 922) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for kubernetes containers" tar])
 (langtool . [(2 0 0) ((cl-lib (0 3))) "Grammar check utility using LanguageTool" tar])
 (latex-extra . [(1 14) ((auctex (11 86 1)) (cl-lib (0 5))) "Adds several useful functionalities to LaTeX-mode." tar])
 (latex-preview-pane . [(20181008 1822) nil "Makes LaTeX editing less painful by providing a updatable preview pane" tar])
 (lcr . [(1 1) ((dash (2 12 0)) (emacs (25 1))) "lightweight coroutines" tar])
 (lispy . [(20190802 1214) ((emacs (24 3)) (ace-window (0 9 0)) (iedit (0 9 9)) (counsel (0 11 0)) (hydra (0 14 0)) (zoutline (0 1 0))) "vi-like Paredit" tar])
 (list-utils . [(0 4 4) nil "List-manipulation utility functions" tar])
 (litable . [(20160922 1559) ((dash (2 6 0))) "dynamic evaluation replacement with emacs" tar])
 (log4e . [(0 3 0) nil "provide logging framework for elisp" tar])
 (loop . [(1 3) nil "friendly imperative loop structures" tar])
 (lsp-java . [(2 2) ((emacs (25 1)) (lsp-mode (6 0)) (markdown-mode (2 3)) (dash (2 14 1)) (f (0 20 0)) (ht (2 0)) (dash-functional (1 2 0)) (request (0 3 0))) "Java support for lsp-mode" tar])
 (lsp-mode . [(6 0) ((emacs (25 1)) (dash (2 14 1)) (dash-functional (2 14 1)) (f (0 20 0)) (ht (2 0)) (spinner (1 7 3))) "LSP mode" tar])
 (lsp-treemacs . [(20190817 1904) ((emacs (25 1)) (dash (2 14 1)) (dash-functional (2 14 1)) (f (0 20 0)) (ht (2 0)) (treemacs (2 5)) (lsp-mode (6 0))) "LSP treemacs" tar])
 (lsp-ui . [(6 0) ((emacs (25 1)) (dash (2 14)) (dash-functional (1 2 0)) (lsp-mode (6 0)) (markdown-mode (2 3))) "UI modules for lsp-mode" tar])
 (lv . [(0 15 0) nil "Other echo area" tar])
 (macrostep . [(0 9) ((cl-lib (0 5))) "interactive macro expander" tar])
 (magit . [(2 90 1) ((emacs (25 1)) (async (1 9 3)) (dash (2 14 1)) (ghub (3 0 0)) (git-commit (2 90 0)) (magit-popup (2 12 4)) (with-editor (2 8 0))) "A Git porcelain inside Emacs." tar])
 (magit-gitflow . [(2 2 3) ((magit (2 1 0)) (magit-popup (2 2 0))) "gitflow extension for magit" tar])
 (magit-popup . [(2 13 0) ((emacs (24 4)) (async (1 9 2)) (dash (2 13 0))) "Define prefixsuffix command combos" tar])
 (magit-todos . [(1 4) ((emacs (25 2)) (async (1 9 2)) (dash (2 13 0)) (f (0 17 2)) (hl-todo (1 9 0)) (magit (2 13 0)) (pcre2el (1 8)) (s (1 12 0))) "Show source file TODOs in Magit" tar])
 (major-mode-hydra . [(0 2 0) ((dash (2 15 0)) (pretty-hydra (0 1 1)) (emacs (25))) "Major mode keybindings managed by Hydra" tar])
 (markdown-mode . [(2 3) ((emacs (24)) (cl-lib (0 5))) "Major mode for Markdown-formatted text" tar])
 (math-symbol-lists . [(1 2 1) nil "Lists of Unicode math symbols and latex commands" tar])
 (maxframe . [(0 5) nil "No description available." tar])
 (memoize . [(1 1) nil "Memoization functions" tar])
 (minimap . [(1 2) nil "Sidebar showing a mini-map of a buffer" tar])
 (mmm-mode . [(0 5 7) ((cl-lib (0 2))) "Allow Multiple Major Modes in a buffer" tar])
 (multiple-cursors . [(1 4 0) ((cl-lib (0 5))) "Multiple cursors for Emacs." tar])
 (nav-flash . [(1 1 0) nil "Briefly highlight the current line" tar])
 (nix-mode . [(1 4 1) ((emacs (24 3))) "Major mode for editing .nix files" tar])
 (nixos-options . [(20160209 1841) ((emacs (24))) "Interface for browsing and completing NixOS options." tar])
 (nlinum . [(1 8 1) nil "Show line numbers in the margin" tar])
 (noflet . [(20141102 1454) nil "locally override functions" tar])
 (nswbuff . [(20190320 740) ((emacs (25 1))) "Quick switching between buffers." tar])
 (ob-async . [(1 0 0) ((async (1 9)) (org (9 0 1)) (emacs (24 4)) (dash (2 14 1))) "Asynchronous org-babel src block execution" tar])
 (ob-browser . [(20170720 1918) ((org (8))) "Render HTML in org-mode blocks." tar])
 (ob-clojurescript . [(20180406 1828) ((emacs (24 4)) (org (9 0))) "org-babel functions for ClojureScript evaluation" tar])
 (ob-elixir . [(20170725 1419) ((org (8))) "org-babel functions for elixir evaluation" tar])
 (ob-kotlin . [(20180823 1321) ((org (8))) "org-babel functions for kotlin evaluation" tar])
 (ob-lfe . [(20170725 1420) ((org (8))) "org-babel functions for lfe evaluation" tar])
 (ob-mongo . [(20170720 1919) ((org (8))) "Execute mongodb queries within org-mode blocks." tar])
 (ob-restclient . [(20190626 1824) ((restclient (0))) "orgmode" tar])
 (ob-rust . [(20180911 1535) nil "Org-babel functions for Rust" tar])
 (ob-translate . [(0 1 2) ((google-translate (0 4)) (org (8))) "Translation of text blocks in org-mode." tar])
 (ob-typescript . [(20150804 1230) ((emacs (24)) (org (8 0))) "org-babel functions for typescript evaluation" tar])
 (org . [(20190624) nil "Outline-based notes management and organizer" tar])
 (org-bullets . [(0 2 4) nil "Show bullets in org8 characters" tar])
 (org-caldav . [(20190817 1004) ((org (7))) "Sync org files with external calendar through CalDAV" tar])
 (org-category-capture . [(1 1 0) ((org (9 0 0)) (emacs (24))) "Contextualy capture of org-mode TODOs." tar])
 (org-edit-latex . [(0 8 3) ((emacs (24 4)) (auctex (11 90))) "Edit embedded LaTeX in a dedicated buffer" tar])
 (org-gcal . [(0 2) ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4))) "Org sync with Google Calendar" tar])
 (org-noter . [(1 3 0) ((emacs (24 4)) (cl-lib (0 6)) (org (9 0))) "A synchronized, Org-mode, document annotator" tar])
 (org-password-manager . [(0 0 1) ((org (8 2 10)) (s (1 9 0))) "Minimal password manager for Emacs Org Mode." tar])
 (org-pdfview . [(0 4) ((org (6 1)) (pdf-tools (0 40))) "Support for links to documents in pdfview mode" tar])
 (org-ref . [(1 1 1) ((dash (2 11 0)) (helm (1 5 5)) (helm-bibtex (2 0 0)) (ivy (0 8 0)) (hydra (0 13 2)) (key-chord (0)) (s (1 10 0)) (f (0 18 0)) (emacs (24 4)) (pdf-tools (0 7))) "citations, crossmode" tar])
 (org-review . [(20160907 537) nil "schedule reviews for Org entries" tar])
 (org-table-sticky-header . [(0 1 1) ((org (8 2 10))) "Sticky header for org-mode tables" tar])
 (orgit . [(1 5 3) ((emacs (25 1)) (dash (2 14 1)) (magit (2 90 0)) (org (8 3 3))) "support for Org links to Magit buffers" tar])
 (ov . [(1 0 6) ((emacs (24 3))) "Overlay library for Emacs Lisp" tar])
 (ox-clip . [(20180306 340) ((org (8 2)) (htmlize (0))) "Crossmode" tar])
 (ox-reveal . [(20190810 1655) ((org (8 3))) "reveal.js Presentation Back-End for Org Export Engine" tar])
 (package-lint . [(0 7) ((cl-lib (0 5)) (emacs (24))) "A linting library for elisp package authors" tar])
 (paradox . [(2 5 4) ((emacs (24 4)) (seq (1 7)) (let-alist (1 0 3)) (spinner (1 7 3)) (hydra (0 13 2))) "A modern Packages Menu. Colored, with package ratings, and customizable." tar])
 (paredit . [(24) nil "minor mode for editing parentheses" tar])
 (parsebib . [(2 3 3) ((emacs (24 3))) "A library for parsing bib files" tar])
 (parseclj . [(0 1 0) ((emacs (25)) (a (0 1 0 -3 4))) "Clojure/EDN parser" tar])
 (parseedn . [(20190331 1058) ((emacs (25)) (a (0 1 0 -3 4)) (parseclj (0 1 0))) "Clojure/EDN parser" tar])
 (pcre2el . [(1 8) ((emacs (24)) (cl-lib (0 3))) "regexp syntax converter" tar])
 (pcsv . [(1 3 6) nil "Parser of csv" tar])
 (pdf-tools . [(0 90) ((emacs (24 3)) (tablist (0 70)) (let-alist (1 0 4))) "Support library for PDF documents." tar])
 (peg . [(0 6) nil "Parsing Expression Grammars in Emacs Lisp" tar])
 (pfuture . [(1 7) ((emacs (25 2))) "a simple wrapper around asynchronous processes" tar])
 (pkg-info . [(0 6) ((epl (0 8))) "Information about packages" tar])
 (plantuml-mode . [(1 3 1) ((dash (2 0 0)) (emacs (25 0))) "Major mode for PlantUML" tar])
 (popup . [(0 5 3) ((cl-lib (0 3))) "Visual Popup User Interface" tar])
 (popwin . [(1 0 0) nil "Popup Window Manager." tar])
 (pos-tip . [(0 4 6) nil "Show tooltip at point" tar])
 (posframe . [(20190805 956) ((emacs (26))) "Pop a posframe (just a frame) at point" tar])
 (powerline . [(2 4) ((cl-lib (0 2))) "Rewrite of Powerline" tar])
 (prettier-js . [(20180109 726) nil "Minor mode to format JS code on file save" tar])
 (prettify-greek . [(20160603 908) nil "Greek letters for prettify-symbols" tar])
 (pretty-hydra . [(0 2 0) ((hydra (0 15 0)) (s (1 12 0)) (dash (2 15 0)) (dash-functional (1 2 0)) (emacs (24))) "A macro for creating nice-looking hydras" tar])
 (pretty-mode . [(2 0 3) nil "Redisplay parts of the buffer as pretty symbols." tar])
 (projectile . [(2 0 0) ((emacs (25 1)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" tar])
 (pyvenv . [(1 20) nil "Python virtual environment interface" tar])
 (queue . [(0 2) nil "Queue data structure" tar])
 (quick-peek . [(20190208 1515) ((emacs (24 3))) "Inline quick-peek windows" tar])
 (racket-mode . [(20190803 1820) ((emacs (24 3)) (faceup (0 0 2))) "Major mode for Racket language." tar])
 (rainbow-delimiters . [(2 1 3) nil "Highlight brackets according to their depth" tar])
 (rainbow-identifiers . [(0 2 2) ((emacs (24))) "Highlight identifiers according to their names" tar])
 (rainbow-mode . [(1 0 1) nil "Colorize color names in buffers" tar])
 (request . [(0 3 1) ((emacs (24 4))) "Compatible layer for URL request in Emacs" tar])
 (request-deferred . [(0 3 1) ((deferred (0 3 1)) (request (0 2 0))) "Wrap request.el by deferred" tar])
 (restclient . [(20190502 2214) nil "An interactive HTTP client for Emacs" tar])
 (restclient-helm . [(20170314 1554) ((restclient (0)) (helm (1 9 4))) "helm interface for restclient.el" tar])
 (restclient-test . [(0 2) ((emacs (24 4)) (restclient (0))) "Run tests with restclient.el" tar])
 (rich-minority . [(1 0 3) ((cl-lib (0 5))) "Cleanmodes." tar])
 (s . [(1 12 0) nil "The long lost Emacs string manipulation library." tar])
 (scihub . [(20190801 920) ((emacs (25))) "Sci-Hub integration" tar])
 (scribble-mode . [(20181204 325) ((emacs (24))) "Major mode for editing Scribble documents" tar])
 (selected . [(20170222 834) nil "Keymap for when region is active" tar])
 (sesman . [(0 3 4) ((emacs (25))) "Generic Session Manager" tar])
 (session . [(2 3 1) nil "use variables, registers and buffer places across sessions" tar])
 (shackle . [(1 0 3) ((cl-lib (0 5))) "Enforce rules for popups" tar])
 (shell-here . [(20150728 1704) nil "Open a shell relative to the working directory" tar])
 (shell-pop . [(0 64) ((emacs (24)) (cl-lib (0 5))) "helps you to use shell easily on Emacs. Only one key action to work." tar])
 (shrink-path . [(0 3 1) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0))) "fish-style path" tar])
 (shut-up . [(0 3 2) ((cl-lib (0 3)) (emacs (24))) "Shut up would you!" tar])
 (shx . [(1 1 2) ((emacs (24 4))) "Extras for the comint-mode shell" tar])
 (smart-hungry-delete . [(20170412 1343) ((emacs (24 3))) "smart hungry deletion of whitespace" tar])
 (smart-mode-line . [(2 13) ((emacs (24 3)) (rich-minority (0 1 1))) "A color coded smart mode-line." tar])
 (smart-mode-line-powerline-theme . [(2 13) ((emacs (24 3)) (powerline (2 2)) (smart-mode-line (2 5))) "smartline theme that mimics the powerline appearance." tar])
 (smart-region . [(20150903 1403) ((emacs (24 4)) (expand-region (0 10 0)) (multiple-cursors (1 3 0)) (cl-lib (0 5))) "Smartly select region, rectangle, multi cursors" tar])
 (smartrep . [(1 0 0) nil "Support sequential operation which omitted prefix keys." tar])
 (smartscan . [(0 2) nil "Jumps between other symbols found at point" tar])
 (smtpmail-multi . [(20160218 2349) nil "Use different smtp servers for sending mail" tar])
 (spaceline . [(2 0 1) ((emacs (24 3)) (cl-lib (0 5)) (powerline (2 3)) (dash (2 11 0)) (s (1 10 0))) "Modeline configuration library for powerline" tar])
 (spaceline-all-the-icons . [(1 4 0) ((emacs (24 4)) (all-the-icons (2 6 0)) (spaceline (2 0 0)) (memoize (1 0 1))) "A Spaceline theme using All The Icons" tar])
 (spinner . [(1 7 3) nil "Add spinners and progressline for ongoing operations" tar])
 (ssass-mode . [(0 2) ((emacs (24 3))) "Edit Sass without a Turing Machine" tar])
 (sublimity . [(20160629) nil "smoothfree mode" tar])
 (suggest . [(0 7) ((emacs (24 4)) (loop (1 3)) (dash (2 13 0)) (s (1 11 0)) (f (0 18 2)) (spinner (1 7 3))) "suggest elisp functions that give the output requested" tar])
 (swiper . [(0 12 0) ((emacs (24 1)) (ivy (0 12 0))) "Isearch with an overview. Oh, man!" tar])
 (symbol-overlay . [(20190608 442) ((emacs (24 3))) "Highlight symbols with keymap-enabled overlays" tar])
 (symon . [(20170224 833) nil "tiny graphical system monitor" tar])
 (sysctl . [(20190720 2028) ((emacs (26))) "Manage sysctl though org-mode" tar])
 (system-packages . [(1 0 11) ((emacs (24 3))) "functions to manage system packages" tar])
 (tablist . [(1 0) ((emacs (24 3))) "Extended tabulatedmode" tar])
 (terraform-doc . [(20190813 1254) ((emacs (24 4))) "Look up terraform documentation on the fly" tar])
 (terraform-mode . [(0 6) ((emacs (24 3)) (hcl-mode (0 3))) "Major mode for terraform configuration file" tar])
 (tide . [(3 2 3) ((dash (2 10 0)) (s (1 11 0)) (flycheck (27)) (typescript-mode (0 1)) (cl-lib (0 5))) "Typescript Interactive Development Environment" tar])
 (transient . [(0 1 0) ((emacs (25 1)) (dash (2 15 0)) (lv (0 14 0))) "Transient commands" tar])
 (transpose-frame . [(20151126 1426) nil "Transpose windows arrangement in a frame" tar])
 (treemacs . [(2 6) ((emacs (25 2)) (cl-lib (0 5)) (dash (2 11 0)) (s (1 10 0)) (f (0 11 0)) (ace-window (0 9 0)) (pfuture (1 7)) (hydra (0 13 2)) (ht (2 2))) "A tree style file explorer package" tar])
 (treemacs-icons-dired . [(2 6) ((treemacs (0 0)) (emacs (25 2)) (cl-lib (0 5))) "Treemacs icons for dired" tar])
 (treemacs-magit . [(2 6) ((emacs (25 2)) (treemacs (0 0)) (pfuture (1 3)) (magit (2 90 0))) "Magit integration for treemacs" tar])
 (treemacs-projectile . [(2 6) ((projectile (0 14 0)) (treemacs (0 0))) "Projectile integration for treemacs" tar])
 (treepy . [(20180724 656) ((emacs (25 1))) "Generic tree traversal tools" tar])
 (ts-comint . [(20181219 719) nil "Run a Typescript interpreter in an inferior process window." tar])
 (typed-clojure-mode . [(1 0 0) ((clojure-mode (2 1 1)) (cider (0 5 0))) "Typed Clojure minor mode for Emacs" tar])
 (typescript-mode . [(0 3) nil "Major mode for editing typescript" tar])
 (undo-tree . [(0 6 5) nil "Treat undo history as a tree" tar])
 (use-package . [(2 4) ((emacs (24 3)) (bind-key (2 4))) "A configuration macro for simplifying your .emacs" tar])
 (use-package-chords . [(2 4) ((use-package (2 1)) (bind-key (1 0)) (bind-chord (0 2)) (key-chord (0 6))) "keypackage" tar])
 (use-package-ensure-system-package . [(20180913 1501) ((use-package (2 1)) (system-packages (1 0 4))) "auto install system packages" tar])
 (use-package-hydra . [(0 2) ((emacs (24 3)) (use-package (2 4))) "Adds :hydra keyword to use-package macro" tar])
 (validate . [(1 0 4) ((emacs (24 1)) (cl-lib (0 5)) (seq (2 16))) "Schema validation for Emacs-lisp" tar])
 (visual-regexp . [(1 1 2) ((cl-lib (0 2))) "A regexp/replace command for Emacs with interactive visual feedback" tar])
 (visual-regexp-steroids . [(1 1 0) ((visual-regexp (1 1))) "Extends visual-regexp to support other regexp engines" tar])
 (vlf . [(1 7 1) nil "View Large Files" tar])
 (vscode-icon . [(20190610 17) ((emacs (25 1))) "Utility package to provide Vscode style icons" tar])
 (vue-html-mode . [(20180428 2035) nil "Major mode for editing Vue.js templates" tar])
 (vue-mode . [(20190415 231) ((mmm-mode (0 5 5)) (vue-html-mode (0 2)) (ssass-mode (0 2)) (edit-indirect (0 1 4))) "Major mode for vue component based on mmm-mode" tar])
 (w3m . [(20190819 701) nil "an Emacs interface to w3m" tar])
 (web-mode . [(16) ((emacs (23 1))) "major mode for editing web templates" tar])
 (websocket . [(1 10) ((cl-lib (0 5))) "Emacs WebSocket client and server" tar])
 (which-key . [(3 3 1) ((emacs (24 4))) "Display available keybindings in popup" tar])
 (winum . [(2 1 0) ((cl-lib (0 5)) (dash (2 13 0))) "Navigate windows and frames using numbers." tar])
 (with-editor . [(2 8 3) ((emacs (24 4)) (async (1 9))) "Use the Emacsclient as $EDITOR" tar])
 (wrap-region . [(0 7 3) ((dash (1 0 3))) "Wrap text with punctation or tag" tar])
 (ws-butler . [(0 6) nil "Unobtrusively remove trailing whitespace." tar])
 (xelb . [(0 17) ((emacs (24 4)) (cl-generic (0 2))) "X protocol Emacs Lisp Binding" tar])
 (xml+ . [(20170727 2351) ((emacs (24 4)) (dash (2 12 0))) "Utilities for xml and html trees" tar])
 (xterm-color . [(1 9) ((cl-lib (0 5))) "ANSI & XTERM 256 color support" tar])
 (yaml-mode . [(0 0 14) ((emacs (24 1))) "Major mode for editing YAML files" tar])
 (yaml-tomato . [(20151123 753) ((s (1 9))) "copy or show the yaml path currently under cursor." tar])
 (yarn-mode . [(1 0) ((emacs (24 3))) "Major mode for yarn.lock files." tar])
 (yasnippet . [(0 13 0) ((cl-lib (0 5))) "Yet another snippet extension for Emacs." tar])
 (yaxception . [(0 3 3) nil "Provide framework about exception like Java for Elisp" tar])
 (zoutline . [(20190520 1819) nil "Simple outline library." tar])
 (cl-generic . [(0 3) nil "Forward cl-generic compatibility for Emacs<25" tar])
)